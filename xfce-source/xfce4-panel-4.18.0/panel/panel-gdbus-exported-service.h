/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __PANEL_GDBUS_EXPORTED_SERVICE_H__
#define __PANEL_GDBUS_EXPORTED_SERVICE_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.xfce.Panel */

#define XFCE_PANEL_TYPE_EXPORTED_SERVICE (xfce_panel_exported_service_get_type ())
#define XFCE_PANEL_EXPORTED_SERVICE(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), XFCE_PANEL_TYPE_EXPORTED_SERVICE, XfcePanelExportedService))
#define XFCE_PANEL_IS_EXPORTED_SERVICE(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), XFCE_PANEL_TYPE_EXPORTED_SERVICE))
#define XFCE_PANEL_EXPORTED_SERVICE_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), XFCE_PANEL_TYPE_EXPORTED_SERVICE, XfcePanelExportedServiceIface))

struct _XfcePanelExportedService;
typedef struct _XfcePanelExportedService XfcePanelExportedService;
typedef struct _XfcePanelExportedServiceIface XfcePanelExportedServiceIface;

struct _XfcePanelExportedServiceIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_add_new_item) (
    XfcePanelExportedService *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_plugin_name,
    const gchar *const *arg_arguments);

  gboolean (*handle_display_items_dialog) (
    XfcePanelExportedService *object,
    GDBusMethodInvocation *invocation,
    guint arg_active);

  gboolean (*handle_display_preferences_dialog) (
    XfcePanelExportedService *object,
    GDBusMethodInvocation *invocation,
    guint arg_active,
    guint arg_socket_id);

  gboolean (*handle_plugin_event) (
    XfcePanelExportedService *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_plugin_name,
    const gchar *arg_name,
    GVariant *arg_value);

  gboolean (*handle_save) (
    XfcePanelExportedService *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_terminate) (
    XfcePanelExportedService *object,
    GDBusMethodInvocation *invocation,
    gboolean arg_restart);

};

GType xfce_panel_exported_service_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *xfce_panel_exported_service_interface_info (void);
guint xfce_panel_exported_service_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void xfce_panel_exported_service_complete_display_preferences_dialog (
    XfcePanelExportedService *object,
    GDBusMethodInvocation *invocation);

void xfce_panel_exported_service_complete_display_items_dialog (
    XfcePanelExportedService *object,
    GDBusMethodInvocation *invocation);

void xfce_panel_exported_service_complete_save (
    XfcePanelExportedService *object,
    GDBusMethodInvocation *invocation);

void xfce_panel_exported_service_complete_add_new_item (
    XfcePanelExportedService *object,
    GDBusMethodInvocation *invocation);

void xfce_panel_exported_service_complete_plugin_event (
    XfcePanelExportedService *object,
    GDBusMethodInvocation *invocation,
    gboolean succeed);

void xfce_panel_exported_service_complete_terminate (
    XfcePanelExportedService *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void xfce_panel_exported_service_call_display_preferences_dialog (
    XfcePanelExportedService *proxy,
    guint arg_active,
    guint arg_socket_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xfce_panel_exported_service_call_display_preferences_dialog_finish (
    XfcePanelExportedService *proxy,
    GAsyncResult *res,
    GError **error);

gboolean xfce_panel_exported_service_call_display_preferences_dialog_sync (
    XfcePanelExportedService *proxy,
    guint arg_active,
    guint arg_socket_id,
    GCancellable *cancellable,
    GError **error);

void xfce_panel_exported_service_call_display_items_dialog (
    XfcePanelExportedService *proxy,
    guint arg_active,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xfce_panel_exported_service_call_display_items_dialog_finish (
    XfcePanelExportedService *proxy,
    GAsyncResult *res,
    GError **error);

gboolean xfce_panel_exported_service_call_display_items_dialog_sync (
    XfcePanelExportedService *proxy,
    guint arg_active,
    GCancellable *cancellable,
    GError **error);

void xfce_panel_exported_service_call_save (
    XfcePanelExportedService *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xfce_panel_exported_service_call_save_finish (
    XfcePanelExportedService *proxy,
    GAsyncResult *res,
    GError **error);

gboolean xfce_panel_exported_service_call_save_sync (
    XfcePanelExportedService *proxy,
    GCancellable *cancellable,
    GError **error);

void xfce_panel_exported_service_call_add_new_item (
    XfcePanelExportedService *proxy,
    const gchar *arg_plugin_name,
    const gchar *const *arg_arguments,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xfce_panel_exported_service_call_add_new_item_finish (
    XfcePanelExportedService *proxy,
    GAsyncResult *res,
    GError **error);

gboolean xfce_panel_exported_service_call_add_new_item_sync (
    XfcePanelExportedService *proxy,
    const gchar *arg_plugin_name,
    const gchar *const *arg_arguments,
    GCancellable *cancellable,
    GError **error);

void xfce_panel_exported_service_call_plugin_event (
    XfcePanelExportedService *proxy,
    const gchar *arg_plugin_name,
    const gchar *arg_name,
    GVariant *arg_value,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xfce_panel_exported_service_call_plugin_event_finish (
    XfcePanelExportedService *proxy,
    gboolean *out_succeed,
    GAsyncResult *res,
    GError **error);

gboolean xfce_panel_exported_service_call_plugin_event_sync (
    XfcePanelExportedService *proxy,
    const gchar *arg_plugin_name,
    const gchar *arg_name,
    GVariant *arg_value,
    gboolean *out_succeed,
    GCancellable *cancellable,
    GError **error);

void xfce_panel_exported_service_call_terminate (
    XfcePanelExportedService *proxy,
    gboolean arg_restart,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xfce_panel_exported_service_call_terminate_finish (
    XfcePanelExportedService *proxy,
    GAsyncResult *res,
    GError **error);

gboolean xfce_panel_exported_service_call_terminate_sync (
    XfcePanelExportedService *proxy,
    gboolean arg_restart,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define XFCE_PANEL_TYPE_EXPORTED_SERVICE_PROXY (xfce_panel_exported_service_proxy_get_type ())
#define XFCE_PANEL_EXPORTED_SERVICE_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), XFCE_PANEL_TYPE_EXPORTED_SERVICE_PROXY, XfcePanelExportedServiceProxy))
#define XFCE_PANEL_EXPORTED_SERVICE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), XFCE_PANEL_TYPE_EXPORTED_SERVICE_PROXY, XfcePanelExportedServiceProxyClass))
#define XFCE_PANEL_EXPORTED_SERVICE_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), XFCE_PANEL_TYPE_EXPORTED_SERVICE_PROXY, XfcePanelExportedServiceProxyClass))
#define XFCE_PANEL_IS_EXPORTED_SERVICE_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), XFCE_PANEL_TYPE_EXPORTED_SERVICE_PROXY))
#define XFCE_PANEL_IS_EXPORTED_SERVICE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), XFCE_PANEL_TYPE_EXPORTED_SERVICE_PROXY))

typedef struct _XfcePanelExportedServiceProxy XfcePanelExportedServiceProxy;
typedef struct _XfcePanelExportedServiceProxyClass XfcePanelExportedServiceProxyClass;
typedef struct _XfcePanelExportedServiceProxyPrivate XfcePanelExportedServiceProxyPrivate;

struct _XfcePanelExportedServiceProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  XfcePanelExportedServiceProxyPrivate *priv;
};

struct _XfcePanelExportedServiceProxyClass
{
  GDBusProxyClass parent_class;
};

GType xfce_panel_exported_service_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (XfcePanelExportedServiceProxy, g_object_unref)
#endif

void xfce_panel_exported_service_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
XfcePanelExportedService *xfce_panel_exported_service_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
XfcePanelExportedService *xfce_panel_exported_service_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void xfce_panel_exported_service_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
XfcePanelExportedService *xfce_panel_exported_service_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
XfcePanelExportedService *xfce_panel_exported_service_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define XFCE_PANEL_TYPE_EXPORTED_SERVICE_SKELETON (xfce_panel_exported_service_skeleton_get_type ())
#define XFCE_PANEL_EXPORTED_SERVICE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), XFCE_PANEL_TYPE_EXPORTED_SERVICE_SKELETON, XfcePanelExportedServiceSkeleton))
#define XFCE_PANEL_EXPORTED_SERVICE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), XFCE_PANEL_TYPE_EXPORTED_SERVICE_SKELETON, XfcePanelExportedServiceSkeletonClass))
#define XFCE_PANEL_EXPORTED_SERVICE_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), XFCE_PANEL_TYPE_EXPORTED_SERVICE_SKELETON, XfcePanelExportedServiceSkeletonClass))
#define XFCE_PANEL_IS_EXPORTED_SERVICE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), XFCE_PANEL_TYPE_EXPORTED_SERVICE_SKELETON))
#define XFCE_PANEL_IS_EXPORTED_SERVICE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), XFCE_PANEL_TYPE_EXPORTED_SERVICE_SKELETON))

typedef struct _XfcePanelExportedServiceSkeleton XfcePanelExportedServiceSkeleton;
typedef struct _XfcePanelExportedServiceSkeletonClass XfcePanelExportedServiceSkeletonClass;
typedef struct _XfcePanelExportedServiceSkeletonPrivate XfcePanelExportedServiceSkeletonPrivate;

struct _XfcePanelExportedServiceSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  XfcePanelExportedServiceSkeletonPrivate *priv;
};

struct _XfcePanelExportedServiceSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType xfce_panel_exported_service_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (XfcePanelExportedServiceSkeleton, g_object_unref)
#endif

XfcePanelExportedService *xfce_panel_exported_service_skeleton_new (void);


G_END_DECLS

#endif /* __PANEL_GDBUS_EXPORTED_SERVICE_H__ */
