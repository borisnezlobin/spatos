/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __THUNAR_THUMBNAIL_CACHE_PROXY_H__
#define __THUNAR_THUMBNAIL_CACHE_PROXY_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.thumbnails.Cache1 */

#define THUNAR_TYPE_THUMBNAIL_CACHE_DBUS (thunar_thumbnail_cache_dbus_get_type ())
#define THUNAR_THUMBNAIL_CACHE_DBUS(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), THUNAR_TYPE_THUMBNAIL_CACHE_DBUS, ThunarThumbnailCacheDBus))
#define THUNAR_IS_THUMBNAIL_CACHE_DBUS(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), THUNAR_TYPE_THUMBNAIL_CACHE_DBUS))
#define THUNAR_THUMBNAIL_CACHE_DBUS_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), THUNAR_TYPE_THUMBNAIL_CACHE_DBUS, ThunarThumbnailCacheDBusIface))

struct _ThunarThumbnailCacheDBus;
typedef struct _ThunarThumbnailCacheDBus ThunarThumbnailCacheDBus;
typedef struct _ThunarThumbnailCacheDBusIface ThunarThumbnailCacheDBusIface;

struct _ThunarThumbnailCacheDBusIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_cleanup) (
    ThunarThumbnailCacheDBus *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_base_uris,
    guint arg_since);

  gboolean (*handle_copy) (
    ThunarThumbnailCacheDBus *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_from_uris,
    const gchar *const *arg_to_uris);

  gboolean (*handle_delete) (
    ThunarThumbnailCacheDBus *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_uris);

  gboolean (*handle_move) (
    ThunarThumbnailCacheDBus *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_from_uris,
    const gchar *const *arg_to_uris);

};

GType thunar_thumbnail_cache_dbus_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *thunar_thumbnail_cache_dbus_interface_info (void);
guint thunar_thumbnail_cache_dbus_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void thunar_thumbnail_cache_dbus_complete_move (
    ThunarThumbnailCacheDBus *object,
    GDBusMethodInvocation *invocation);

void thunar_thumbnail_cache_dbus_complete_copy (
    ThunarThumbnailCacheDBus *object,
    GDBusMethodInvocation *invocation);

void thunar_thumbnail_cache_dbus_complete_delete (
    ThunarThumbnailCacheDBus *object,
    GDBusMethodInvocation *invocation);

void thunar_thumbnail_cache_dbus_complete_cleanup (
    ThunarThumbnailCacheDBus *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void thunar_thumbnail_cache_dbus_call_move (
    ThunarThumbnailCacheDBus *proxy,
    const gchar *const *arg_from_uris,
    const gchar *const *arg_to_uris,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean thunar_thumbnail_cache_dbus_call_move_finish (
    ThunarThumbnailCacheDBus *proxy,
    GAsyncResult *res,
    GError **error);

gboolean thunar_thumbnail_cache_dbus_call_move_sync (
    ThunarThumbnailCacheDBus *proxy,
    const gchar *const *arg_from_uris,
    const gchar *const *arg_to_uris,
    GCancellable *cancellable,
    GError **error);

void thunar_thumbnail_cache_dbus_call_copy (
    ThunarThumbnailCacheDBus *proxy,
    const gchar *const *arg_from_uris,
    const gchar *const *arg_to_uris,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean thunar_thumbnail_cache_dbus_call_copy_finish (
    ThunarThumbnailCacheDBus *proxy,
    GAsyncResult *res,
    GError **error);

gboolean thunar_thumbnail_cache_dbus_call_copy_sync (
    ThunarThumbnailCacheDBus *proxy,
    const gchar *const *arg_from_uris,
    const gchar *const *arg_to_uris,
    GCancellable *cancellable,
    GError **error);

void thunar_thumbnail_cache_dbus_call_delete (
    ThunarThumbnailCacheDBus *proxy,
    const gchar *const *arg_uris,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean thunar_thumbnail_cache_dbus_call_delete_finish (
    ThunarThumbnailCacheDBus *proxy,
    GAsyncResult *res,
    GError **error);

gboolean thunar_thumbnail_cache_dbus_call_delete_sync (
    ThunarThumbnailCacheDBus *proxy,
    const gchar *const *arg_uris,
    GCancellable *cancellable,
    GError **error);

void thunar_thumbnail_cache_dbus_call_cleanup (
    ThunarThumbnailCacheDBus *proxy,
    const gchar *const *arg_base_uris,
    guint arg_since,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean thunar_thumbnail_cache_dbus_call_cleanup_finish (
    ThunarThumbnailCacheDBus *proxy,
    GAsyncResult *res,
    GError **error);

gboolean thunar_thumbnail_cache_dbus_call_cleanup_sync (
    ThunarThumbnailCacheDBus *proxy,
    const gchar *const *arg_base_uris,
    guint arg_since,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define THUNAR_TYPE_THUMBNAIL_CACHE_DBUS_PROXY (thunar_thumbnail_cache_dbus_proxy_get_type ())
#define THUNAR_THUMBNAIL_CACHE_DBUS_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), THUNAR_TYPE_THUMBNAIL_CACHE_DBUS_PROXY, ThunarThumbnailCacheDBusProxy))
#define THUNAR_THUMBNAIL_CACHE_DBUS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), THUNAR_TYPE_THUMBNAIL_CACHE_DBUS_PROXY, ThunarThumbnailCacheDBusProxyClass))
#define THUNAR_THUMBNAIL_CACHE_DBUS_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), THUNAR_TYPE_THUMBNAIL_CACHE_DBUS_PROXY, ThunarThumbnailCacheDBusProxyClass))
#define THUNAR_IS_THUMBNAIL_CACHE_DBUS_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), THUNAR_TYPE_THUMBNAIL_CACHE_DBUS_PROXY))
#define THUNAR_IS_THUMBNAIL_CACHE_DBUS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), THUNAR_TYPE_THUMBNAIL_CACHE_DBUS_PROXY))

typedef struct _ThunarThumbnailCacheDBusProxy ThunarThumbnailCacheDBusProxy;
typedef struct _ThunarThumbnailCacheDBusProxyClass ThunarThumbnailCacheDBusProxyClass;
typedef struct _ThunarThumbnailCacheDBusProxyPrivate ThunarThumbnailCacheDBusProxyPrivate;

struct _ThunarThumbnailCacheDBusProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  ThunarThumbnailCacheDBusProxyPrivate *priv;
};

struct _ThunarThumbnailCacheDBusProxyClass
{
  GDBusProxyClass parent_class;
};

GType thunar_thumbnail_cache_dbus_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ThunarThumbnailCacheDBusProxy, g_object_unref)
#endif

void thunar_thumbnail_cache_dbus_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
ThunarThumbnailCacheDBus *thunar_thumbnail_cache_dbus_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
ThunarThumbnailCacheDBus *thunar_thumbnail_cache_dbus_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void thunar_thumbnail_cache_dbus_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
ThunarThumbnailCacheDBus *thunar_thumbnail_cache_dbus_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
ThunarThumbnailCacheDBus *thunar_thumbnail_cache_dbus_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define THUNAR_TYPE_THUMBNAIL_CACHE_DBUS_SKELETON (thunar_thumbnail_cache_dbus_skeleton_get_type ())
#define THUNAR_THUMBNAIL_CACHE_DBUS_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), THUNAR_TYPE_THUMBNAIL_CACHE_DBUS_SKELETON, ThunarThumbnailCacheDBusSkeleton))
#define THUNAR_THUMBNAIL_CACHE_DBUS_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), THUNAR_TYPE_THUMBNAIL_CACHE_DBUS_SKELETON, ThunarThumbnailCacheDBusSkeletonClass))
#define THUNAR_THUMBNAIL_CACHE_DBUS_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), THUNAR_TYPE_THUMBNAIL_CACHE_DBUS_SKELETON, ThunarThumbnailCacheDBusSkeletonClass))
#define THUNAR_IS_THUMBNAIL_CACHE_DBUS_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), THUNAR_TYPE_THUMBNAIL_CACHE_DBUS_SKELETON))
#define THUNAR_IS_THUMBNAIL_CACHE_DBUS_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), THUNAR_TYPE_THUMBNAIL_CACHE_DBUS_SKELETON))

typedef struct _ThunarThumbnailCacheDBusSkeleton ThunarThumbnailCacheDBusSkeleton;
typedef struct _ThunarThumbnailCacheDBusSkeletonClass ThunarThumbnailCacheDBusSkeletonClass;
typedef struct _ThunarThumbnailCacheDBusSkeletonPrivate ThunarThumbnailCacheDBusSkeletonPrivate;

struct _ThunarThumbnailCacheDBusSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  ThunarThumbnailCacheDBusSkeletonPrivate *priv;
};

struct _ThunarThumbnailCacheDBusSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType thunar_thumbnail_cache_dbus_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ThunarThumbnailCacheDBusSkeleton, g_object_unref)
#endif

ThunarThumbnailCacheDBus *thunar_thumbnail_cache_dbus_skeleton_new (void);


G_END_DECLS

#endif /* __THUNAR_THUMBNAIL_CACHE_PROXY_H__ */
