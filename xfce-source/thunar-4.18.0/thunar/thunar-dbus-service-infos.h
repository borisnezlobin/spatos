/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __THUNAR_DBUS_SERVICE_INFOS_H__
#define __THUNAR_DBUS_SERVICE_INFOS_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.xfce.FileManager */

#define THUNAR_TYPE_DBUS_FILE_MANAGER (thunar_dbus_file_manager_get_type ())
#define THUNAR_DBUS_FILE_MANAGER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), THUNAR_TYPE_DBUS_FILE_MANAGER, ThunarDBusFileManager))
#define THUNAR_IS_DBUS_FILE_MANAGER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), THUNAR_TYPE_DBUS_FILE_MANAGER))
#define THUNAR_DBUS_FILE_MANAGER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), THUNAR_TYPE_DBUS_FILE_MANAGER, ThunarDBusFileManagerIface))

struct _ThunarDBusFileManager;
typedef struct _ThunarDBusFileManager ThunarDBusFileManager;
typedef struct _ThunarDBusFileManagerIface ThunarDBusFileManagerIface;

struct _ThunarDBusFileManagerIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_copy_into) (
    ThunarDBusFileManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_working_directory,
    const gchar *const *arg_source_filenames,
    const gchar *arg_target_filename,
    const gchar *arg_display,
    const gchar *arg_startup_id);

  gboolean (*handle_copy_to) (
    ThunarDBusFileManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_working_directory,
    const gchar *const *arg_source_filenames,
    const gchar *const *arg_target_filenames,
    const gchar *arg_display,
    const gchar *arg_startup_id);

  gboolean (*handle_create_file) (
    ThunarDBusFileManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_parent_directory,
    const gchar *arg_content_type,
    const gchar *arg_display,
    const gchar *arg_startup_id);

  gboolean (*handle_create_file_from_template) (
    ThunarDBusFileManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_parent_directory,
    const gchar *arg_template_uri,
    const gchar *arg_display,
    const gchar *arg_startup_id);

  gboolean (*handle_display_application_chooser_dialog) (
    ThunarDBusFileManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_uri,
    gboolean arg_open,
    gboolean arg_preselect_default_checkbox,
    const gchar *arg_display,
    const gchar *arg_startup_id);

  gboolean (*handle_display_chooser_dialog) (
    ThunarDBusFileManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_uri,
    gboolean arg_open,
    const gchar *arg_display,
    const gchar *arg_startup_id);

  gboolean (*handle_display_file_properties) (
    ThunarDBusFileManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_uri,
    const gchar *arg_display,
    const gchar *arg_startup_id);

  gboolean (*handle_display_folder) (
    ThunarDBusFileManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_uri,
    const gchar *arg_display,
    const gchar *arg_startup_id);

  gboolean (*handle_display_folder_and_select) (
    ThunarDBusFileManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_uri,
    const gchar *arg_filename,
    const gchar *arg_display,
    const gchar *arg_startup_id);

  gboolean (*handle_display_preferences_dialog) (
    ThunarDBusFileManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_display,
    const gchar *arg_startup_id);

  gboolean (*handle_execute) (
    ThunarDBusFileManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_working_directory,
    const gchar *arg_uri,
    const gchar *const *arg_files,
    const gchar *arg_display,
    const gchar *arg_startup_id);

  gboolean (*handle_launch) (
    ThunarDBusFileManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_uri,
    const gchar *arg_display,
    const gchar *arg_startup_id);

  gboolean (*handle_launch_files) (
    ThunarDBusFileManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_working_directory,
    const gchar *const *arg_filenames,
    const gchar *arg_display,
    const gchar *arg_startup_id);

  gboolean (*handle_link_into) (
    ThunarDBusFileManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_working_directory,
    const gchar *const *arg_source_filenames,
    const gchar *arg_target_filename,
    const gchar *arg_display,
    const gchar *arg_startup_id);

  gboolean (*handle_move_into) (
    ThunarDBusFileManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_working_directory,
    const gchar *const *arg_source_filenames,
    const gchar *arg_target_filename,
    const gchar *arg_display,
    const gchar *arg_startup_id);

  gboolean (*handle_rename_file) (
    ThunarDBusFileManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_filename,
    const gchar *arg_display,
    const gchar *arg_startup_id);

  gboolean (*handle_unlink_files) (
    ThunarDBusFileManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_working_directory,
    const gchar *const *arg_filenames,
    const gchar *arg_display,
    const gchar *arg_startup_id);

};

GType thunar_dbus_file_manager_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *thunar_dbus_file_manager_interface_info (void);
guint thunar_dbus_file_manager_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void thunar_dbus_file_manager_complete_display_chooser_dialog (
    ThunarDBusFileManager *object,
    GDBusMethodInvocation *invocation);

void thunar_dbus_file_manager_complete_display_application_chooser_dialog (
    ThunarDBusFileManager *object,
    GDBusMethodInvocation *invocation);

void thunar_dbus_file_manager_complete_display_folder (
    ThunarDBusFileManager *object,
    GDBusMethodInvocation *invocation);

void thunar_dbus_file_manager_complete_display_folder_and_select (
    ThunarDBusFileManager *object,
    GDBusMethodInvocation *invocation);

void thunar_dbus_file_manager_complete_display_file_properties (
    ThunarDBusFileManager *object,
    GDBusMethodInvocation *invocation);

void thunar_dbus_file_manager_complete_launch (
    ThunarDBusFileManager *object,
    GDBusMethodInvocation *invocation);

void thunar_dbus_file_manager_complete_execute (
    ThunarDBusFileManager *object,
    GDBusMethodInvocation *invocation);

void thunar_dbus_file_manager_complete_display_preferences_dialog (
    ThunarDBusFileManager *object,
    GDBusMethodInvocation *invocation);

void thunar_dbus_file_manager_complete_copy_to (
    ThunarDBusFileManager *object,
    GDBusMethodInvocation *invocation);

void thunar_dbus_file_manager_complete_copy_into (
    ThunarDBusFileManager *object,
    GDBusMethodInvocation *invocation);

void thunar_dbus_file_manager_complete_move_into (
    ThunarDBusFileManager *object,
    GDBusMethodInvocation *invocation);

void thunar_dbus_file_manager_complete_link_into (
    ThunarDBusFileManager *object,
    GDBusMethodInvocation *invocation);

void thunar_dbus_file_manager_complete_unlink_files (
    ThunarDBusFileManager *object,
    GDBusMethodInvocation *invocation);

void thunar_dbus_file_manager_complete_launch_files (
    ThunarDBusFileManager *object,
    GDBusMethodInvocation *invocation);

void thunar_dbus_file_manager_complete_rename_file (
    ThunarDBusFileManager *object,
    GDBusMethodInvocation *invocation);

void thunar_dbus_file_manager_complete_create_file (
    ThunarDBusFileManager *object,
    GDBusMethodInvocation *invocation);

void thunar_dbus_file_manager_complete_create_file_from_template (
    ThunarDBusFileManager *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void thunar_dbus_file_manager_call_display_chooser_dialog (
    ThunarDBusFileManager *proxy,
    const gchar *arg_uri,
    gboolean arg_open,
    const gchar *arg_display,
    const gchar *arg_startup_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean thunar_dbus_file_manager_call_display_chooser_dialog_finish (
    ThunarDBusFileManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean thunar_dbus_file_manager_call_display_chooser_dialog_sync (
    ThunarDBusFileManager *proxy,
    const gchar *arg_uri,
    gboolean arg_open,
    const gchar *arg_display,
    const gchar *arg_startup_id,
    GCancellable *cancellable,
    GError **error);

void thunar_dbus_file_manager_call_display_application_chooser_dialog (
    ThunarDBusFileManager *proxy,
    const gchar *arg_uri,
    gboolean arg_open,
    gboolean arg_preselect_default_checkbox,
    const gchar *arg_display,
    const gchar *arg_startup_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean thunar_dbus_file_manager_call_display_application_chooser_dialog_finish (
    ThunarDBusFileManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean thunar_dbus_file_manager_call_display_application_chooser_dialog_sync (
    ThunarDBusFileManager *proxy,
    const gchar *arg_uri,
    gboolean arg_open,
    gboolean arg_preselect_default_checkbox,
    const gchar *arg_display,
    const gchar *arg_startup_id,
    GCancellable *cancellable,
    GError **error);

void thunar_dbus_file_manager_call_display_folder (
    ThunarDBusFileManager *proxy,
    const gchar *arg_uri,
    const gchar *arg_display,
    const gchar *arg_startup_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean thunar_dbus_file_manager_call_display_folder_finish (
    ThunarDBusFileManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean thunar_dbus_file_manager_call_display_folder_sync (
    ThunarDBusFileManager *proxy,
    const gchar *arg_uri,
    const gchar *arg_display,
    const gchar *arg_startup_id,
    GCancellable *cancellable,
    GError **error);

void thunar_dbus_file_manager_call_display_folder_and_select (
    ThunarDBusFileManager *proxy,
    const gchar *arg_uri,
    const gchar *arg_filename,
    const gchar *arg_display,
    const gchar *arg_startup_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean thunar_dbus_file_manager_call_display_folder_and_select_finish (
    ThunarDBusFileManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean thunar_dbus_file_manager_call_display_folder_and_select_sync (
    ThunarDBusFileManager *proxy,
    const gchar *arg_uri,
    const gchar *arg_filename,
    const gchar *arg_display,
    const gchar *arg_startup_id,
    GCancellable *cancellable,
    GError **error);

void thunar_dbus_file_manager_call_display_file_properties (
    ThunarDBusFileManager *proxy,
    const gchar *arg_uri,
    const gchar *arg_display,
    const gchar *arg_startup_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean thunar_dbus_file_manager_call_display_file_properties_finish (
    ThunarDBusFileManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean thunar_dbus_file_manager_call_display_file_properties_sync (
    ThunarDBusFileManager *proxy,
    const gchar *arg_uri,
    const gchar *arg_display,
    const gchar *arg_startup_id,
    GCancellable *cancellable,
    GError **error);

void thunar_dbus_file_manager_call_launch (
    ThunarDBusFileManager *proxy,
    const gchar *arg_uri,
    const gchar *arg_display,
    const gchar *arg_startup_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean thunar_dbus_file_manager_call_launch_finish (
    ThunarDBusFileManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean thunar_dbus_file_manager_call_launch_sync (
    ThunarDBusFileManager *proxy,
    const gchar *arg_uri,
    const gchar *arg_display,
    const gchar *arg_startup_id,
    GCancellable *cancellable,
    GError **error);

void thunar_dbus_file_manager_call_execute (
    ThunarDBusFileManager *proxy,
    const gchar *arg_working_directory,
    const gchar *arg_uri,
    const gchar *const *arg_files,
    const gchar *arg_display,
    const gchar *arg_startup_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean thunar_dbus_file_manager_call_execute_finish (
    ThunarDBusFileManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean thunar_dbus_file_manager_call_execute_sync (
    ThunarDBusFileManager *proxy,
    const gchar *arg_working_directory,
    const gchar *arg_uri,
    const gchar *const *arg_files,
    const gchar *arg_display,
    const gchar *arg_startup_id,
    GCancellable *cancellable,
    GError **error);

void thunar_dbus_file_manager_call_display_preferences_dialog (
    ThunarDBusFileManager *proxy,
    const gchar *arg_display,
    const gchar *arg_startup_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean thunar_dbus_file_manager_call_display_preferences_dialog_finish (
    ThunarDBusFileManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean thunar_dbus_file_manager_call_display_preferences_dialog_sync (
    ThunarDBusFileManager *proxy,
    const gchar *arg_display,
    const gchar *arg_startup_id,
    GCancellable *cancellable,
    GError **error);

void thunar_dbus_file_manager_call_copy_to (
    ThunarDBusFileManager *proxy,
    const gchar *arg_working_directory,
    const gchar *const *arg_source_filenames,
    const gchar *const *arg_target_filenames,
    const gchar *arg_display,
    const gchar *arg_startup_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean thunar_dbus_file_manager_call_copy_to_finish (
    ThunarDBusFileManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean thunar_dbus_file_manager_call_copy_to_sync (
    ThunarDBusFileManager *proxy,
    const gchar *arg_working_directory,
    const gchar *const *arg_source_filenames,
    const gchar *const *arg_target_filenames,
    const gchar *arg_display,
    const gchar *arg_startup_id,
    GCancellable *cancellable,
    GError **error);

void thunar_dbus_file_manager_call_copy_into (
    ThunarDBusFileManager *proxy,
    const gchar *arg_working_directory,
    const gchar *const *arg_source_filenames,
    const gchar *arg_target_filename,
    const gchar *arg_display,
    const gchar *arg_startup_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean thunar_dbus_file_manager_call_copy_into_finish (
    ThunarDBusFileManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean thunar_dbus_file_manager_call_copy_into_sync (
    ThunarDBusFileManager *proxy,
    const gchar *arg_working_directory,
    const gchar *const *arg_source_filenames,
    const gchar *arg_target_filename,
    const gchar *arg_display,
    const gchar *arg_startup_id,
    GCancellable *cancellable,
    GError **error);

void thunar_dbus_file_manager_call_move_into (
    ThunarDBusFileManager *proxy,
    const gchar *arg_working_directory,
    const gchar *const *arg_source_filenames,
    const gchar *arg_target_filename,
    const gchar *arg_display,
    const gchar *arg_startup_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean thunar_dbus_file_manager_call_move_into_finish (
    ThunarDBusFileManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean thunar_dbus_file_manager_call_move_into_sync (
    ThunarDBusFileManager *proxy,
    const gchar *arg_working_directory,
    const gchar *const *arg_source_filenames,
    const gchar *arg_target_filename,
    const gchar *arg_display,
    const gchar *arg_startup_id,
    GCancellable *cancellable,
    GError **error);

void thunar_dbus_file_manager_call_link_into (
    ThunarDBusFileManager *proxy,
    const gchar *arg_working_directory,
    const gchar *const *arg_source_filenames,
    const gchar *arg_target_filename,
    const gchar *arg_display,
    const gchar *arg_startup_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean thunar_dbus_file_manager_call_link_into_finish (
    ThunarDBusFileManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean thunar_dbus_file_manager_call_link_into_sync (
    ThunarDBusFileManager *proxy,
    const gchar *arg_working_directory,
    const gchar *const *arg_source_filenames,
    const gchar *arg_target_filename,
    const gchar *arg_display,
    const gchar *arg_startup_id,
    GCancellable *cancellable,
    GError **error);

void thunar_dbus_file_manager_call_unlink_files (
    ThunarDBusFileManager *proxy,
    const gchar *arg_working_directory,
    const gchar *const *arg_filenames,
    const gchar *arg_display,
    const gchar *arg_startup_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean thunar_dbus_file_manager_call_unlink_files_finish (
    ThunarDBusFileManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean thunar_dbus_file_manager_call_unlink_files_sync (
    ThunarDBusFileManager *proxy,
    const gchar *arg_working_directory,
    const gchar *const *arg_filenames,
    const gchar *arg_display,
    const gchar *arg_startup_id,
    GCancellable *cancellable,
    GError **error);

void thunar_dbus_file_manager_call_launch_files (
    ThunarDBusFileManager *proxy,
    const gchar *arg_working_directory,
    const gchar *const *arg_filenames,
    const gchar *arg_display,
    const gchar *arg_startup_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean thunar_dbus_file_manager_call_launch_files_finish (
    ThunarDBusFileManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean thunar_dbus_file_manager_call_launch_files_sync (
    ThunarDBusFileManager *proxy,
    const gchar *arg_working_directory,
    const gchar *const *arg_filenames,
    const gchar *arg_display,
    const gchar *arg_startup_id,
    GCancellable *cancellable,
    GError **error);

void thunar_dbus_file_manager_call_rename_file (
    ThunarDBusFileManager *proxy,
    const gchar *arg_filename,
    const gchar *arg_display,
    const gchar *arg_startup_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean thunar_dbus_file_manager_call_rename_file_finish (
    ThunarDBusFileManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean thunar_dbus_file_manager_call_rename_file_sync (
    ThunarDBusFileManager *proxy,
    const gchar *arg_filename,
    const gchar *arg_display,
    const gchar *arg_startup_id,
    GCancellable *cancellable,
    GError **error);

void thunar_dbus_file_manager_call_create_file (
    ThunarDBusFileManager *proxy,
    const gchar *arg_parent_directory,
    const gchar *arg_content_type,
    const gchar *arg_display,
    const gchar *arg_startup_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean thunar_dbus_file_manager_call_create_file_finish (
    ThunarDBusFileManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean thunar_dbus_file_manager_call_create_file_sync (
    ThunarDBusFileManager *proxy,
    const gchar *arg_parent_directory,
    const gchar *arg_content_type,
    const gchar *arg_display,
    const gchar *arg_startup_id,
    GCancellable *cancellable,
    GError **error);

void thunar_dbus_file_manager_call_create_file_from_template (
    ThunarDBusFileManager *proxy,
    const gchar *arg_parent_directory,
    const gchar *arg_template_uri,
    const gchar *arg_display,
    const gchar *arg_startup_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean thunar_dbus_file_manager_call_create_file_from_template_finish (
    ThunarDBusFileManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean thunar_dbus_file_manager_call_create_file_from_template_sync (
    ThunarDBusFileManager *proxy,
    const gchar *arg_parent_directory,
    const gchar *arg_template_uri,
    const gchar *arg_display,
    const gchar *arg_startup_id,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define THUNAR_TYPE_DBUS_FILE_MANAGER_PROXY (thunar_dbus_file_manager_proxy_get_type ())
#define THUNAR_DBUS_FILE_MANAGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), THUNAR_TYPE_DBUS_FILE_MANAGER_PROXY, ThunarDBusFileManagerProxy))
#define THUNAR_DBUS_FILE_MANAGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), THUNAR_TYPE_DBUS_FILE_MANAGER_PROXY, ThunarDBusFileManagerProxyClass))
#define THUNAR_DBUS_FILE_MANAGER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), THUNAR_TYPE_DBUS_FILE_MANAGER_PROXY, ThunarDBusFileManagerProxyClass))
#define THUNAR_IS_DBUS_FILE_MANAGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), THUNAR_TYPE_DBUS_FILE_MANAGER_PROXY))
#define THUNAR_IS_DBUS_FILE_MANAGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), THUNAR_TYPE_DBUS_FILE_MANAGER_PROXY))

typedef struct _ThunarDBusFileManagerProxy ThunarDBusFileManagerProxy;
typedef struct _ThunarDBusFileManagerProxyClass ThunarDBusFileManagerProxyClass;
typedef struct _ThunarDBusFileManagerProxyPrivate ThunarDBusFileManagerProxyPrivate;

struct _ThunarDBusFileManagerProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  ThunarDBusFileManagerProxyPrivate *priv;
};

struct _ThunarDBusFileManagerProxyClass
{
  GDBusProxyClass parent_class;
};

GType thunar_dbus_file_manager_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ThunarDBusFileManagerProxy, g_object_unref)
#endif

void thunar_dbus_file_manager_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
ThunarDBusFileManager *thunar_dbus_file_manager_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
ThunarDBusFileManager *thunar_dbus_file_manager_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void thunar_dbus_file_manager_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
ThunarDBusFileManager *thunar_dbus_file_manager_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
ThunarDBusFileManager *thunar_dbus_file_manager_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define THUNAR_TYPE_DBUS_FILE_MANAGER_SKELETON (thunar_dbus_file_manager_skeleton_get_type ())
#define THUNAR_DBUS_FILE_MANAGER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), THUNAR_TYPE_DBUS_FILE_MANAGER_SKELETON, ThunarDBusFileManagerSkeleton))
#define THUNAR_DBUS_FILE_MANAGER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), THUNAR_TYPE_DBUS_FILE_MANAGER_SKELETON, ThunarDBusFileManagerSkeletonClass))
#define THUNAR_DBUS_FILE_MANAGER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), THUNAR_TYPE_DBUS_FILE_MANAGER_SKELETON, ThunarDBusFileManagerSkeletonClass))
#define THUNAR_IS_DBUS_FILE_MANAGER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), THUNAR_TYPE_DBUS_FILE_MANAGER_SKELETON))
#define THUNAR_IS_DBUS_FILE_MANAGER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), THUNAR_TYPE_DBUS_FILE_MANAGER_SKELETON))

typedef struct _ThunarDBusFileManagerSkeleton ThunarDBusFileManagerSkeleton;
typedef struct _ThunarDBusFileManagerSkeletonClass ThunarDBusFileManagerSkeletonClass;
typedef struct _ThunarDBusFileManagerSkeletonPrivate ThunarDBusFileManagerSkeletonPrivate;

struct _ThunarDBusFileManagerSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  ThunarDBusFileManagerSkeletonPrivate *priv;
};

struct _ThunarDBusFileManagerSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType thunar_dbus_file_manager_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ThunarDBusFileManagerSkeleton, g_object_unref)
#endif

ThunarDBusFileManager *thunar_dbus_file_manager_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.xfce.Trash */

#define THUNAR_TYPE_DBUS_TRASH (thunar_dbus_trash_get_type ())
#define THUNAR_DBUS_TRASH(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), THUNAR_TYPE_DBUS_TRASH, ThunarDBusTrash))
#define THUNAR_IS_DBUS_TRASH(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), THUNAR_TYPE_DBUS_TRASH))
#define THUNAR_DBUS_TRASH_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), THUNAR_TYPE_DBUS_TRASH, ThunarDBusTrashIface))

struct _ThunarDBusTrash;
typedef struct _ThunarDBusTrash ThunarDBusTrash;
typedef struct _ThunarDBusTrashIface ThunarDBusTrashIface;

struct _ThunarDBusTrashIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_display_trash) (
    ThunarDBusTrash *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_display,
    const gchar *arg_startup_id);

  gboolean (*handle_empty_trash) (
    ThunarDBusTrash *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_display,
    const gchar *arg_startup_id);

  gboolean (*handle_move_to_trash) (
    ThunarDBusTrash *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_filenames,
    const gchar *arg_display,
    const gchar *arg_startup_id);

  gboolean (*handle_query_trash) (
    ThunarDBusTrash *object,
    GDBusMethodInvocation *invocation);

  void (*trash_changed) (
    ThunarDBusTrash *object);

};

GType thunar_dbus_trash_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *thunar_dbus_trash_interface_info (void);
guint thunar_dbus_trash_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void thunar_dbus_trash_complete_display_trash (
    ThunarDBusTrash *object,
    GDBusMethodInvocation *invocation);

void thunar_dbus_trash_complete_empty_trash (
    ThunarDBusTrash *object,
    GDBusMethodInvocation *invocation);

void thunar_dbus_trash_complete_move_to_trash (
    ThunarDBusTrash *object,
    GDBusMethodInvocation *invocation);

void thunar_dbus_trash_complete_query_trash (
    ThunarDBusTrash *object,
    GDBusMethodInvocation *invocation,
    gboolean full);



/* D-Bus signal emissions functions: */
void thunar_dbus_trash_emit_trash_changed (
    ThunarDBusTrash *object);



/* D-Bus method calls: */
void thunar_dbus_trash_call_display_trash (
    ThunarDBusTrash *proxy,
    const gchar *arg_display,
    const gchar *arg_startup_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean thunar_dbus_trash_call_display_trash_finish (
    ThunarDBusTrash *proxy,
    GAsyncResult *res,
    GError **error);

gboolean thunar_dbus_trash_call_display_trash_sync (
    ThunarDBusTrash *proxy,
    const gchar *arg_display,
    const gchar *arg_startup_id,
    GCancellable *cancellable,
    GError **error);

void thunar_dbus_trash_call_empty_trash (
    ThunarDBusTrash *proxy,
    const gchar *arg_display,
    const gchar *arg_startup_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean thunar_dbus_trash_call_empty_trash_finish (
    ThunarDBusTrash *proxy,
    GAsyncResult *res,
    GError **error);

gboolean thunar_dbus_trash_call_empty_trash_sync (
    ThunarDBusTrash *proxy,
    const gchar *arg_display,
    const gchar *arg_startup_id,
    GCancellable *cancellable,
    GError **error);

void thunar_dbus_trash_call_move_to_trash (
    ThunarDBusTrash *proxy,
    const gchar *const *arg_filenames,
    const gchar *arg_display,
    const gchar *arg_startup_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean thunar_dbus_trash_call_move_to_trash_finish (
    ThunarDBusTrash *proxy,
    GAsyncResult *res,
    GError **error);

gboolean thunar_dbus_trash_call_move_to_trash_sync (
    ThunarDBusTrash *proxy,
    const gchar *const *arg_filenames,
    const gchar *arg_display,
    const gchar *arg_startup_id,
    GCancellable *cancellable,
    GError **error);

void thunar_dbus_trash_call_query_trash (
    ThunarDBusTrash *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean thunar_dbus_trash_call_query_trash_finish (
    ThunarDBusTrash *proxy,
    gboolean *out_full,
    GAsyncResult *res,
    GError **error);

gboolean thunar_dbus_trash_call_query_trash_sync (
    ThunarDBusTrash *proxy,
    gboolean *out_full,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define THUNAR_TYPE_DBUS_TRASH_PROXY (thunar_dbus_trash_proxy_get_type ())
#define THUNAR_DBUS_TRASH_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), THUNAR_TYPE_DBUS_TRASH_PROXY, ThunarDBusTrashProxy))
#define THUNAR_DBUS_TRASH_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), THUNAR_TYPE_DBUS_TRASH_PROXY, ThunarDBusTrashProxyClass))
#define THUNAR_DBUS_TRASH_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), THUNAR_TYPE_DBUS_TRASH_PROXY, ThunarDBusTrashProxyClass))
#define THUNAR_IS_DBUS_TRASH_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), THUNAR_TYPE_DBUS_TRASH_PROXY))
#define THUNAR_IS_DBUS_TRASH_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), THUNAR_TYPE_DBUS_TRASH_PROXY))

typedef struct _ThunarDBusTrashProxy ThunarDBusTrashProxy;
typedef struct _ThunarDBusTrashProxyClass ThunarDBusTrashProxyClass;
typedef struct _ThunarDBusTrashProxyPrivate ThunarDBusTrashProxyPrivate;

struct _ThunarDBusTrashProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  ThunarDBusTrashProxyPrivate *priv;
};

struct _ThunarDBusTrashProxyClass
{
  GDBusProxyClass parent_class;
};

GType thunar_dbus_trash_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ThunarDBusTrashProxy, g_object_unref)
#endif

void thunar_dbus_trash_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
ThunarDBusTrash *thunar_dbus_trash_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
ThunarDBusTrash *thunar_dbus_trash_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void thunar_dbus_trash_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
ThunarDBusTrash *thunar_dbus_trash_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
ThunarDBusTrash *thunar_dbus_trash_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define THUNAR_TYPE_DBUS_TRASH_SKELETON (thunar_dbus_trash_skeleton_get_type ())
#define THUNAR_DBUS_TRASH_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), THUNAR_TYPE_DBUS_TRASH_SKELETON, ThunarDBusTrashSkeleton))
#define THUNAR_DBUS_TRASH_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), THUNAR_TYPE_DBUS_TRASH_SKELETON, ThunarDBusTrashSkeletonClass))
#define THUNAR_DBUS_TRASH_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), THUNAR_TYPE_DBUS_TRASH_SKELETON, ThunarDBusTrashSkeletonClass))
#define THUNAR_IS_DBUS_TRASH_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), THUNAR_TYPE_DBUS_TRASH_SKELETON))
#define THUNAR_IS_DBUS_TRASH_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), THUNAR_TYPE_DBUS_TRASH_SKELETON))

typedef struct _ThunarDBusTrashSkeleton ThunarDBusTrashSkeleton;
typedef struct _ThunarDBusTrashSkeletonClass ThunarDBusTrashSkeletonClass;
typedef struct _ThunarDBusTrashSkeletonPrivate ThunarDBusTrashSkeletonPrivate;

struct _ThunarDBusTrashSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  ThunarDBusTrashSkeletonPrivate *priv;
};

struct _ThunarDBusTrashSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType thunar_dbus_trash_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ThunarDBusTrashSkeleton, g_object_unref)
#endif

ThunarDBusTrash *thunar_dbus_trash_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.xfce.Thunar */

#define THUNAR_TYPE_DBUS_THUNAR (thunar_dbus_thunar_get_type ())
#define THUNAR_DBUS_THUNAR(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), THUNAR_TYPE_DBUS_THUNAR, ThunarDBusThunar))
#define THUNAR_IS_DBUS_THUNAR(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), THUNAR_TYPE_DBUS_THUNAR))
#define THUNAR_DBUS_THUNAR_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), THUNAR_TYPE_DBUS_THUNAR, ThunarDBusThunarIface))

struct _ThunarDBusThunar;
typedef struct _ThunarDBusThunar ThunarDBusThunar;
typedef struct _ThunarDBusThunarIface ThunarDBusThunarIface;

struct _ThunarDBusThunarIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_bulk_rename) (
    ThunarDBusThunar *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_working_directory,
    const gchar *const *arg_filenames,
    gboolean arg_standalone,
    const gchar *arg_display,
    const gchar *arg_startup_id);

  gboolean (*handle_terminate) (
    ThunarDBusThunar *object,
    GDBusMethodInvocation *invocation);

};

GType thunar_dbus_thunar_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *thunar_dbus_thunar_interface_info (void);
guint thunar_dbus_thunar_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void thunar_dbus_thunar_complete_bulk_rename (
    ThunarDBusThunar *object,
    GDBusMethodInvocation *invocation);

void thunar_dbus_thunar_complete_terminate (
    ThunarDBusThunar *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void thunar_dbus_thunar_call_bulk_rename (
    ThunarDBusThunar *proxy,
    const gchar *arg_working_directory,
    const gchar *const *arg_filenames,
    gboolean arg_standalone,
    const gchar *arg_display,
    const gchar *arg_startup_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean thunar_dbus_thunar_call_bulk_rename_finish (
    ThunarDBusThunar *proxy,
    GAsyncResult *res,
    GError **error);

gboolean thunar_dbus_thunar_call_bulk_rename_sync (
    ThunarDBusThunar *proxy,
    const gchar *arg_working_directory,
    const gchar *const *arg_filenames,
    gboolean arg_standalone,
    const gchar *arg_display,
    const gchar *arg_startup_id,
    GCancellable *cancellable,
    GError **error);

void thunar_dbus_thunar_call_terminate (
    ThunarDBusThunar *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean thunar_dbus_thunar_call_terminate_finish (
    ThunarDBusThunar *proxy,
    GAsyncResult *res,
    GError **error);

gboolean thunar_dbus_thunar_call_terminate_sync (
    ThunarDBusThunar *proxy,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define THUNAR_TYPE_DBUS_THUNAR_PROXY (thunar_dbus_thunar_proxy_get_type ())
#define THUNAR_DBUS_THUNAR_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), THUNAR_TYPE_DBUS_THUNAR_PROXY, ThunarDBusThunarProxy))
#define THUNAR_DBUS_THUNAR_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), THUNAR_TYPE_DBUS_THUNAR_PROXY, ThunarDBusThunarProxyClass))
#define THUNAR_DBUS_THUNAR_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), THUNAR_TYPE_DBUS_THUNAR_PROXY, ThunarDBusThunarProxyClass))
#define THUNAR_IS_DBUS_THUNAR_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), THUNAR_TYPE_DBUS_THUNAR_PROXY))
#define THUNAR_IS_DBUS_THUNAR_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), THUNAR_TYPE_DBUS_THUNAR_PROXY))

typedef struct _ThunarDBusThunarProxy ThunarDBusThunarProxy;
typedef struct _ThunarDBusThunarProxyClass ThunarDBusThunarProxyClass;
typedef struct _ThunarDBusThunarProxyPrivate ThunarDBusThunarProxyPrivate;

struct _ThunarDBusThunarProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  ThunarDBusThunarProxyPrivate *priv;
};

struct _ThunarDBusThunarProxyClass
{
  GDBusProxyClass parent_class;
};

GType thunar_dbus_thunar_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ThunarDBusThunarProxy, g_object_unref)
#endif

void thunar_dbus_thunar_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
ThunarDBusThunar *thunar_dbus_thunar_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
ThunarDBusThunar *thunar_dbus_thunar_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void thunar_dbus_thunar_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
ThunarDBusThunar *thunar_dbus_thunar_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
ThunarDBusThunar *thunar_dbus_thunar_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define THUNAR_TYPE_DBUS_THUNAR_SKELETON (thunar_dbus_thunar_skeleton_get_type ())
#define THUNAR_DBUS_THUNAR_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), THUNAR_TYPE_DBUS_THUNAR_SKELETON, ThunarDBusThunarSkeleton))
#define THUNAR_DBUS_THUNAR_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), THUNAR_TYPE_DBUS_THUNAR_SKELETON, ThunarDBusThunarSkeletonClass))
#define THUNAR_DBUS_THUNAR_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), THUNAR_TYPE_DBUS_THUNAR_SKELETON, ThunarDBusThunarSkeletonClass))
#define THUNAR_IS_DBUS_THUNAR_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), THUNAR_TYPE_DBUS_THUNAR_SKELETON))
#define THUNAR_IS_DBUS_THUNAR_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), THUNAR_TYPE_DBUS_THUNAR_SKELETON))

typedef struct _ThunarDBusThunarSkeleton ThunarDBusThunarSkeleton;
typedef struct _ThunarDBusThunarSkeletonClass ThunarDBusThunarSkeletonClass;
typedef struct _ThunarDBusThunarSkeletonPrivate ThunarDBusThunarSkeletonPrivate;

struct _ThunarDBusThunarSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  ThunarDBusThunarSkeletonPrivate *priv;
};

struct _ThunarDBusThunarSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType thunar_dbus_thunar_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ThunarDBusThunarSkeleton, g_object_unref)
#endif

ThunarDBusThunar *thunar_dbus_thunar_skeleton_new (void);


G_END_DECLS

#endif /* __THUNAR_DBUS_SERVICE_INFOS_H__ */
