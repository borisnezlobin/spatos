/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __XFSM_CLIENT_DBUS_CLIENT_H__
#define __XFSM_CLIENT_DBUS_CLIENT_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.xfce.Session.Client */

#define XFSM_TYPE_CLIENT (xfsm_client_get_type ())
#define XFSM_CLIENT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), XFSM_TYPE_CLIENT, XfsmClient))
#define XFSM_IS_CLIENT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), XFSM_TYPE_CLIENT))
#define XFSM_CLIENT_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), XFSM_TYPE_CLIENT, XfsmClientIface))

struct _XfsmClient;
typedef struct _XfsmClient XfsmClient;
typedef struct _XfsmClientIface XfsmClientIface;

struct _XfsmClientIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_delete_sm_properties) (
    XfsmClient *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_names);

  gboolean (*handle_end_session_response) (
    XfsmClient *object,
    GDBusMethodInvocation *invocation,
    gboolean arg_is_ok,
    const gchar *arg_reason);

  gboolean (*handle_get_all_sm_properties) (
    XfsmClient *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_id) (
    XfsmClient *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_sm_properties) (
    XfsmClient *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_names);

  gboolean (*handle_get_state) (
    XfsmClient *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_set_sm_properties) (
    XfsmClient *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_properties);

  gboolean (*handle_terminate) (
    XfsmClient *object,
    GDBusMethodInvocation *invocation);

  void (*cancel_end_session) (
    XfsmClient *object);

  void (*end_session) (
    XfsmClient *object,
    guint arg_flags);

  void (*query_end_session) (
    XfsmClient *object,
    guint arg_flags);

  void (*sm_property_changed) (
    XfsmClient *object,
    const gchar *arg_name,
    GVariant *arg_value);

  void (*sm_property_deleted) (
    XfsmClient *object,
    const gchar *arg_name);

  void (*state_changed) (
    XfsmClient *object,
    guint arg_old_state,
    guint arg_new_state);

  void (*stop) (
    XfsmClient *object);

};

GType xfsm_client_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *xfsm_client_interface_info (void);
guint xfsm_client_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void xfsm_client_complete_get_id (
    XfsmClient *object,
    GDBusMethodInvocation *invocation,
    const gchar *id);

void xfsm_client_complete_get_state (
    XfsmClient *object,
    GDBusMethodInvocation *invocation,
    guint state);

void xfsm_client_complete_get_all_sm_properties (
    XfsmClient *object,
    GDBusMethodInvocation *invocation,
    GVariant *properties);

void xfsm_client_complete_get_sm_properties (
    XfsmClient *object,
    GDBusMethodInvocation *invocation,
    GVariant *values);

void xfsm_client_complete_set_sm_properties (
    XfsmClient *object,
    GDBusMethodInvocation *invocation);

void xfsm_client_complete_delete_sm_properties (
    XfsmClient *object,
    GDBusMethodInvocation *invocation);

void xfsm_client_complete_terminate (
    XfsmClient *object,
    GDBusMethodInvocation *invocation);

void xfsm_client_complete_end_session_response (
    XfsmClient *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void xfsm_client_emit_state_changed (
    XfsmClient *object,
    guint arg_old_state,
    guint arg_new_state);

void xfsm_client_emit_sm_property_changed (
    XfsmClient *object,
    const gchar *arg_name,
    GVariant *arg_value);

void xfsm_client_emit_sm_property_deleted (
    XfsmClient *object,
    const gchar *arg_name);

void xfsm_client_emit_query_end_session (
    XfsmClient *object,
    guint arg_flags);

void xfsm_client_emit_end_session (
    XfsmClient *object,
    guint arg_flags);

void xfsm_client_emit_cancel_end_session (
    XfsmClient *object);

void xfsm_client_emit_stop (
    XfsmClient *object);



/* D-Bus method calls: */
void xfsm_client_call_get_id (
    XfsmClient *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xfsm_client_call_get_id_finish (
    XfsmClient *proxy,
    gchar **out_id,
    GAsyncResult *res,
    GError **error);

gboolean xfsm_client_call_get_id_sync (
    XfsmClient *proxy,
    gchar **out_id,
    GCancellable *cancellable,
    GError **error);

void xfsm_client_call_get_state (
    XfsmClient *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xfsm_client_call_get_state_finish (
    XfsmClient *proxy,
    guint *out_state,
    GAsyncResult *res,
    GError **error);

gboolean xfsm_client_call_get_state_sync (
    XfsmClient *proxy,
    guint *out_state,
    GCancellable *cancellable,
    GError **error);

void xfsm_client_call_get_all_sm_properties (
    XfsmClient *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xfsm_client_call_get_all_sm_properties_finish (
    XfsmClient *proxy,
    GVariant **out_properties,
    GAsyncResult *res,
    GError **error);

gboolean xfsm_client_call_get_all_sm_properties_sync (
    XfsmClient *proxy,
    GVariant **out_properties,
    GCancellable *cancellable,
    GError **error);

void xfsm_client_call_get_sm_properties (
    XfsmClient *proxy,
    const gchar *const *arg_names,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xfsm_client_call_get_sm_properties_finish (
    XfsmClient *proxy,
    GVariant **out_values,
    GAsyncResult *res,
    GError **error);

gboolean xfsm_client_call_get_sm_properties_sync (
    XfsmClient *proxy,
    const gchar *const *arg_names,
    GVariant **out_values,
    GCancellable *cancellable,
    GError **error);

void xfsm_client_call_set_sm_properties (
    XfsmClient *proxy,
    GVariant *arg_properties,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xfsm_client_call_set_sm_properties_finish (
    XfsmClient *proxy,
    GAsyncResult *res,
    GError **error);

gboolean xfsm_client_call_set_sm_properties_sync (
    XfsmClient *proxy,
    GVariant *arg_properties,
    GCancellable *cancellable,
    GError **error);

void xfsm_client_call_delete_sm_properties (
    XfsmClient *proxy,
    const gchar *const *arg_names,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xfsm_client_call_delete_sm_properties_finish (
    XfsmClient *proxy,
    GAsyncResult *res,
    GError **error);

gboolean xfsm_client_call_delete_sm_properties_sync (
    XfsmClient *proxy,
    const gchar *const *arg_names,
    GCancellable *cancellable,
    GError **error);

void xfsm_client_call_terminate (
    XfsmClient *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xfsm_client_call_terminate_finish (
    XfsmClient *proxy,
    GAsyncResult *res,
    GError **error);

gboolean xfsm_client_call_terminate_sync (
    XfsmClient *proxy,
    GCancellable *cancellable,
    GError **error);

void xfsm_client_call_end_session_response (
    XfsmClient *proxy,
    gboolean arg_is_ok,
    const gchar *arg_reason,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xfsm_client_call_end_session_response_finish (
    XfsmClient *proxy,
    GAsyncResult *res,
    GError **error);

gboolean xfsm_client_call_end_session_response_sync (
    XfsmClient *proxy,
    gboolean arg_is_ok,
    const gchar *arg_reason,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define XFSM_TYPE_CLIENT_PROXY (xfsm_client_proxy_get_type ())
#define XFSM_CLIENT_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), XFSM_TYPE_CLIENT_PROXY, XfsmClientProxy))
#define XFSM_CLIENT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), XFSM_TYPE_CLIENT_PROXY, XfsmClientProxyClass))
#define XFSM_CLIENT_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), XFSM_TYPE_CLIENT_PROXY, XfsmClientProxyClass))
#define XFSM_IS_CLIENT_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), XFSM_TYPE_CLIENT_PROXY))
#define XFSM_IS_CLIENT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), XFSM_TYPE_CLIENT_PROXY))

typedef struct _XfsmClientProxy XfsmClientProxy;
typedef struct _XfsmClientProxyClass XfsmClientProxyClass;
typedef struct _XfsmClientProxyPrivate XfsmClientProxyPrivate;

struct _XfsmClientProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  XfsmClientProxyPrivate *priv;
};

struct _XfsmClientProxyClass
{
  GDBusProxyClass parent_class;
};

GType xfsm_client_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (XfsmClientProxy, g_object_unref)
#endif

void xfsm_client_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
XfsmClient *xfsm_client_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
XfsmClient *xfsm_client_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void xfsm_client_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
XfsmClient *xfsm_client_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
XfsmClient *xfsm_client_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define XFSM_TYPE_CLIENT_SKELETON (xfsm_client_skeleton_get_type ())
#define XFSM_CLIENT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), XFSM_TYPE_CLIENT_SKELETON, XfsmClientSkeleton))
#define XFSM_CLIENT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), XFSM_TYPE_CLIENT_SKELETON, XfsmClientSkeletonClass))
#define XFSM_CLIENT_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), XFSM_TYPE_CLIENT_SKELETON, XfsmClientSkeletonClass))
#define XFSM_IS_CLIENT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), XFSM_TYPE_CLIENT_SKELETON))
#define XFSM_IS_CLIENT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), XFSM_TYPE_CLIENT_SKELETON))

typedef struct _XfsmClientSkeleton XfsmClientSkeleton;
typedef struct _XfsmClientSkeletonClass XfsmClientSkeletonClass;
typedef struct _XfsmClientSkeletonPrivate XfsmClientSkeletonPrivate;

struct _XfsmClientSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  XfsmClientSkeletonPrivate *priv;
};

struct _XfsmClientSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType xfsm_client_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (XfsmClientSkeleton, g_object_unref)
#endif

XfsmClient *xfsm_client_skeleton_new (void);


G_END_DECLS

#endif /* __XFSM_CLIENT_DBUS_CLIENT_H__ */
