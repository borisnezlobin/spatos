/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __XFSM_MANAGER_DBUS_CLIENT_H__
#define __XFSM_MANAGER_DBUS_CLIENT_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.xfce.Session.Manager */

#define XFSM_TYPE_MANAGER (xfsm_manager_get_type ())
#define XFSM_MANAGER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), XFSM_TYPE_MANAGER, XfsmManager))
#define XFSM_IS_MANAGER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), XFSM_TYPE_MANAGER))
#define XFSM_MANAGER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), XFSM_TYPE_MANAGER, XfsmManagerIface))

struct _XfsmManager;
typedef struct _XfsmManager XfsmManager;
typedef struct _XfsmManagerIface XfsmManagerIface;

struct _XfsmManagerIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_can_hibernate) (
    XfsmManager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_can_hybrid_sleep) (
    XfsmManager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_can_restart) (
    XfsmManager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_can_shutdown) (
    XfsmManager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_can_suspend) (
    XfsmManager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_checkpoint) (
    XfsmManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_session_name);

  gboolean (*handle_get_info) (
    XfsmManager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_state) (
    XfsmManager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_hibernate) (
    XfsmManager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_hybrid_sleep) (
    XfsmManager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_list_clients) (
    XfsmManager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_logout) (
    XfsmManager *object,
    GDBusMethodInvocation *invocation,
    gboolean arg_show_dialog,
    gboolean arg_allow_save);

  gboolean (*handle_register_client) (
    XfsmManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_app_id,
    const gchar *arg_client_startup_id);

  gboolean (*handle_restart) (
    XfsmManager *object,
    GDBusMethodInvocation *invocation,
    gboolean arg_allow_save);

  gboolean (*handle_shutdown) (
    XfsmManager *object,
    GDBusMethodInvocation *invocation,
    gboolean arg_allow_save);

  gboolean (*handle_suspend) (
    XfsmManager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_switch_user) (
    XfsmManager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_unregister_client) (
    XfsmManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_client_id);

  void (*client_registered) (
    XfsmManager *object,
    const gchar *arg_client);

  void (*shutdown_cancelled) (
    XfsmManager *object);

  void (*state_changed) (
    XfsmManager *object,
    guint arg_old_state,
    guint arg_new_state);

};

GType xfsm_manager_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *xfsm_manager_interface_info (void);
guint xfsm_manager_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void xfsm_manager_complete_get_info (
    XfsmManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *name,
    const gchar *version,
    const gchar *vendor);

void xfsm_manager_complete_list_clients (
    XfsmManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *clients);

void xfsm_manager_complete_get_state (
    XfsmManager *object,
    GDBusMethodInvocation *invocation,
    guint state);

void xfsm_manager_complete_checkpoint (
    XfsmManager *object,
    GDBusMethodInvocation *invocation);

void xfsm_manager_complete_logout (
    XfsmManager *object,
    GDBusMethodInvocation *invocation);

void xfsm_manager_complete_shutdown (
    XfsmManager *object,
    GDBusMethodInvocation *invocation);

void xfsm_manager_complete_can_shutdown (
    XfsmManager *object,
    GDBusMethodInvocation *invocation,
    gboolean can_shutdown);

void xfsm_manager_complete_restart (
    XfsmManager *object,
    GDBusMethodInvocation *invocation);

void xfsm_manager_complete_can_restart (
    XfsmManager *object,
    GDBusMethodInvocation *invocation,
    gboolean can_restart);

void xfsm_manager_complete_suspend (
    XfsmManager *object,
    GDBusMethodInvocation *invocation);

void xfsm_manager_complete_can_suspend (
    XfsmManager *object,
    GDBusMethodInvocation *invocation,
    gboolean can_suspend);

void xfsm_manager_complete_hibernate (
    XfsmManager *object,
    GDBusMethodInvocation *invocation);

void xfsm_manager_complete_can_hibernate (
    XfsmManager *object,
    GDBusMethodInvocation *invocation,
    gboolean can_hibernate);

void xfsm_manager_complete_hybrid_sleep (
    XfsmManager *object,
    GDBusMethodInvocation *invocation);

void xfsm_manager_complete_can_hybrid_sleep (
    XfsmManager *object,
    GDBusMethodInvocation *invocation,
    gboolean can_hybrid_sleep);

void xfsm_manager_complete_switch_user (
    XfsmManager *object,
    GDBusMethodInvocation *invocation);

void xfsm_manager_complete_register_client (
    XfsmManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *client_id);

void xfsm_manager_complete_unregister_client (
    XfsmManager *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void xfsm_manager_emit_state_changed (
    XfsmManager *object,
    guint arg_old_state,
    guint arg_new_state);

void xfsm_manager_emit_client_registered (
    XfsmManager *object,
    const gchar *arg_client);

void xfsm_manager_emit_shutdown_cancelled (
    XfsmManager *object);



/* D-Bus method calls: */
void xfsm_manager_call_get_info (
    XfsmManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xfsm_manager_call_get_info_finish (
    XfsmManager *proxy,
    gchar **out_name,
    gchar **out_version,
    gchar **out_vendor,
    GAsyncResult *res,
    GError **error);

gboolean xfsm_manager_call_get_info_sync (
    XfsmManager *proxy,
    gchar **out_name,
    gchar **out_version,
    gchar **out_vendor,
    GCancellable *cancellable,
    GError **error);

void xfsm_manager_call_list_clients (
    XfsmManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xfsm_manager_call_list_clients_finish (
    XfsmManager *proxy,
    gchar ***out_clients,
    GAsyncResult *res,
    GError **error);

gboolean xfsm_manager_call_list_clients_sync (
    XfsmManager *proxy,
    gchar ***out_clients,
    GCancellable *cancellable,
    GError **error);

void xfsm_manager_call_get_state (
    XfsmManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xfsm_manager_call_get_state_finish (
    XfsmManager *proxy,
    guint *out_state,
    GAsyncResult *res,
    GError **error);

gboolean xfsm_manager_call_get_state_sync (
    XfsmManager *proxy,
    guint *out_state,
    GCancellable *cancellable,
    GError **error);

void xfsm_manager_call_checkpoint (
    XfsmManager *proxy,
    const gchar *arg_session_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xfsm_manager_call_checkpoint_finish (
    XfsmManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean xfsm_manager_call_checkpoint_sync (
    XfsmManager *proxy,
    const gchar *arg_session_name,
    GCancellable *cancellable,
    GError **error);

void xfsm_manager_call_logout (
    XfsmManager *proxy,
    gboolean arg_show_dialog,
    gboolean arg_allow_save,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xfsm_manager_call_logout_finish (
    XfsmManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean xfsm_manager_call_logout_sync (
    XfsmManager *proxy,
    gboolean arg_show_dialog,
    gboolean arg_allow_save,
    GCancellable *cancellable,
    GError **error);

void xfsm_manager_call_shutdown (
    XfsmManager *proxy,
    gboolean arg_allow_save,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xfsm_manager_call_shutdown_finish (
    XfsmManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean xfsm_manager_call_shutdown_sync (
    XfsmManager *proxy,
    gboolean arg_allow_save,
    GCancellable *cancellable,
    GError **error);

void xfsm_manager_call_can_shutdown (
    XfsmManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xfsm_manager_call_can_shutdown_finish (
    XfsmManager *proxy,
    gboolean *out_can_shutdown,
    GAsyncResult *res,
    GError **error);

gboolean xfsm_manager_call_can_shutdown_sync (
    XfsmManager *proxy,
    gboolean *out_can_shutdown,
    GCancellable *cancellable,
    GError **error);

void xfsm_manager_call_restart (
    XfsmManager *proxy,
    gboolean arg_allow_save,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xfsm_manager_call_restart_finish (
    XfsmManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean xfsm_manager_call_restart_sync (
    XfsmManager *proxy,
    gboolean arg_allow_save,
    GCancellable *cancellable,
    GError **error);

void xfsm_manager_call_can_restart (
    XfsmManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xfsm_manager_call_can_restart_finish (
    XfsmManager *proxy,
    gboolean *out_can_restart,
    GAsyncResult *res,
    GError **error);

gboolean xfsm_manager_call_can_restart_sync (
    XfsmManager *proxy,
    gboolean *out_can_restart,
    GCancellable *cancellable,
    GError **error);

void xfsm_manager_call_suspend (
    XfsmManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xfsm_manager_call_suspend_finish (
    XfsmManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean xfsm_manager_call_suspend_sync (
    XfsmManager *proxy,
    GCancellable *cancellable,
    GError **error);

void xfsm_manager_call_can_suspend (
    XfsmManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xfsm_manager_call_can_suspend_finish (
    XfsmManager *proxy,
    gboolean *out_can_suspend,
    GAsyncResult *res,
    GError **error);

gboolean xfsm_manager_call_can_suspend_sync (
    XfsmManager *proxy,
    gboolean *out_can_suspend,
    GCancellable *cancellable,
    GError **error);

void xfsm_manager_call_hibernate (
    XfsmManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xfsm_manager_call_hibernate_finish (
    XfsmManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean xfsm_manager_call_hibernate_sync (
    XfsmManager *proxy,
    GCancellable *cancellable,
    GError **error);

void xfsm_manager_call_can_hibernate (
    XfsmManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xfsm_manager_call_can_hibernate_finish (
    XfsmManager *proxy,
    gboolean *out_can_hibernate,
    GAsyncResult *res,
    GError **error);

gboolean xfsm_manager_call_can_hibernate_sync (
    XfsmManager *proxy,
    gboolean *out_can_hibernate,
    GCancellable *cancellable,
    GError **error);

void xfsm_manager_call_hybrid_sleep (
    XfsmManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xfsm_manager_call_hybrid_sleep_finish (
    XfsmManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean xfsm_manager_call_hybrid_sleep_sync (
    XfsmManager *proxy,
    GCancellable *cancellable,
    GError **error);

void xfsm_manager_call_can_hybrid_sleep (
    XfsmManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xfsm_manager_call_can_hybrid_sleep_finish (
    XfsmManager *proxy,
    gboolean *out_can_hybrid_sleep,
    GAsyncResult *res,
    GError **error);

gboolean xfsm_manager_call_can_hybrid_sleep_sync (
    XfsmManager *proxy,
    gboolean *out_can_hybrid_sleep,
    GCancellable *cancellable,
    GError **error);

void xfsm_manager_call_switch_user (
    XfsmManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xfsm_manager_call_switch_user_finish (
    XfsmManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean xfsm_manager_call_switch_user_sync (
    XfsmManager *proxy,
    GCancellable *cancellable,
    GError **error);

void xfsm_manager_call_register_client (
    XfsmManager *proxy,
    const gchar *arg_app_id,
    const gchar *arg_client_startup_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xfsm_manager_call_register_client_finish (
    XfsmManager *proxy,
    gchar **out_client_id,
    GAsyncResult *res,
    GError **error);

gboolean xfsm_manager_call_register_client_sync (
    XfsmManager *proxy,
    const gchar *arg_app_id,
    const gchar *arg_client_startup_id,
    gchar **out_client_id,
    GCancellable *cancellable,
    GError **error);

void xfsm_manager_call_unregister_client (
    XfsmManager *proxy,
    const gchar *arg_client_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xfsm_manager_call_unregister_client_finish (
    XfsmManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean xfsm_manager_call_unregister_client_sync (
    XfsmManager *proxy,
    const gchar *arg_client_id,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define XFSM_TYPE_MANAGER_PROXY (xfsm_manager_proxy_get_type ())
#define XFSM_MANAGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), XFSM_TYPE_MANAGER_PROXY, XfsmManagerProxy))
#define XFSM_MANAGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), XFSM_TYPE_MANAGER_PROXY, XfsmManagerProxyClass))
#define XFSM_MANAGER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), XFSM_TYPE_MANAGER_PROXY, XfsmManagerProxyClass))
#define XFSM_IS_MANAGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), XFSM_TYPE_MANAGER_PROXY))
#define XFSM_IS_MANAGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), XFSM_TYPE_MANAGER_PROXY))

typedef struct _XfsmManagerProxy XfsmManagerProxy;
typedef struct _XfsmManagerProxyClass XfsmManagerProxyClass;
typedef struct _XfsmManagerProxyPrivate XfsmManagerProxyPrivate;

struct _XfsmManagerProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  XfsmManagerProxyPrivate *priv;
};

struct _XfsmManagerProxyClass
{
  GDBusProxyClass parent_class;
};

GType xfsm_manager_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (XfsmManagerProxy, g_object_unref)
#endif

void xfsm_manager_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
XfsmManager *xfsm_manager_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
XfsmManager *xfsm_manager_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void xfsm_manager_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
XfsmManager *xfsm_manager_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
XfsmManager *xfsm_manager_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define XFSM_TYPE_MANAGER_SKELETON (xfsm_manager_skeleton_get_type ())
#define XFSM_MANAGER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), XFSM_TYPE_MANAGER_SKELETON, XfsmManagerSkeleton))
#define XFSM_MANAGER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), XFSM_TYPE_MANAGER_SKELETON, XfsmManagerSkeletonClass))
#define XFSM_MANAGER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), XFSM_TYPE_MANAGER_SKELETON, XfsmManagerSkeletonClass))
#define XFSM_IS_MANAGER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), XFSM_TYPE_MANAGER_SKELETON))
#define XFSM_IS_MANAGER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), XFSM_TYPE_MANAGER_SKELETON))

typedef struct _XfsmManagerSkeleton XfsmManagerSkeleton;
typedef struct _XfsmManagerSkeletonClass XfsmManagerSkeletonClass;
typedef struct _XfsmManagerSkeletonPrivate XfsmManagerSkeletonPrivate;

struct _XfsmManagerSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  XfsmManagerSkeletonPrivate *priv;
};

struct _XfsmManagerSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType xfsm_manager_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (XfsmManagerSkeleton, g_object_unref)
#endif

XfsmManager *xfsm_manager_skeleton_new (void);


G_END_DECLS

#endif /* __XFSM_MANAGER_DBUS_CLIENT_H__ */
