/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __TUMBLER_MANAGER_GDBUS_H__
#define __TUMBLER_MANAGER_GDBUS_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.thumbnails.Manager1 */

#define TUMBLER_TYPE_EXPORTED_MANAGER (tumbler_exported_manager_get_type ())
#define TUMBLER_EXPORTED_MANAGER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TUMBLER_TYPE_EXPORTED_MANAGER, TumblerExportedManager))
#define TUMBLER_IS_EXPORTED_MANAGER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TUMBLER_TYPE_EXPORTED_MANAGER))
#define TUMBLER_EXPORTED_MANAGER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TUMBLER_TYPE_EXPORTED_MANAGER, TumblerExportedManagerIface))

struct _TumblerExportedManager;
typedef struct _TumblerExportedManager TumblerExportedManager;
typedef struct _TumblerExportedManagerIface TumblerExportedManagerIface;

struct _TumblerExportedManagerIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_register) (
    TumblerExportedManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_uri_scheme,
    const gchar *arg_mime_type);

};

GType tumbler_exported_manager_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *tumbler_exported_manager_interface_info (void);
guint tumbler_exported_manager_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void tumbler_exported_manager_complete_register (
    TumblerExportedManager *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void tumbler_exported_manager_call_register (
    TumblerExportedManager *proxy,
    const gchar *arg_uri_scheme,
    const gchar *arg_mime_type,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean tumbler_exported_manager_call_register_finish (
    TumblerExportedManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean tumbler_exported_manager_call_register_sync (
    TumblerExportedManager *proxy,
    const gchar *arg_uri_scheme,
    const gchar *arg_mime_type,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TUMBLER_TYPE_EXPORTED_MANAGER_PROXY (tumbler_exported_manager_proxy_get_type ())
#define TUMBLER_EXPORTED_MANAGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TUMBLER_TYPE_EXPORTED_MANAGER_PROXY, TumblerExportedManagerProxy))
#define TUMBLER_EXPORTED_MANAGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TUMBLER_TYPE_EXPORTED_MANAGER_PROXY, TumblerExportedManagerProxyClass))
#define TUMBLER_EXPORTED_MANAGER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TUMBLER_TYPE_EXPORTED_MANAGER_PROXY, TumblerExportedManagerProxyClass))
#define TUMBLER_IS_EXPORTED_MANAGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TUMBLER_TYPE_EXPORTED_MANAGER_PROXY))
#define TUMBLER_IS_EXPORTED_MANAGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TUMBLER_TYPE_EXPORTED_MANAGER_PROXY))

typedef struct _TumblerExportedManagerProxy TumblerExportedManagerProxy;
typedef struct _TumblerExportedManagerProxyClass TumblerExportedManagerProxyClass;
typedef struct _TumblerExportedManagerProxyPrivate TumblerExportedManagerProxyPrivate;

struct _TumblerExportedManagerProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  TumblerExportedManagerProxyPrivate *priv;
};

struct _TumblerExportedManagerProxyClass
{
  GDBusProxyClass parent_class;
};

GType tumbler_exported_manager_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (TumblerExportedManagerProxy, g_object_unref)
#endif

void tumbler_exported_manager_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
TumblerExportedManager *tumbler_exported_manager_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
TumblerExportedManager *tumbler_exported_manager_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void tumbler_exported_manager_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
TumblerExportedManager *tumbler_exported_manager_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
TumblerExportedManager *tumbler_exported_manager_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TUMBLER_TYPE_EXPORTED_MANAGER_SKELETON (tumbler_exported_manager_skeleton_get_type ())
#define TUMBLER_EXPORTED_MANAGER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TUMBLER_TYPE_EXPORTED_MANAGER_SKELETON, TumblerExportedManagerSkeleton))
#define TUMBLER_EXPORTED_MANAGER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TUMBLER_TYPE_EXPORTED_MANAGER_SKELETON, TumblerExportedManagerSkeletonClass))
#define TUMBLER_EXPORTED_MANAGER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TUMBLER_TYPE_EXPORTED_MANAGER_SKELETON, TumblerExportedManagerSkeletonClass))
#define TUMBLER_IS_EXPORTED_MANAGER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TUMBLER_TYPE_EXPORTED_MANAGER_SKELETON))
#define TUMBLER_IS_EXPORTED_MANAGER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TUMBLER_TYPE_EXPORTED_MANAGER_SKELETON))

typedef struct _TumblerExportedManagerSkeleton TumblerExportedManagerSkeleton;
typedef struct _TumblerExportedManagerSkeletonClass TumblerExportedManagerSkeletonClass;
typedef struct _TumblerExportedManagerSkeletonPrivate TumblerExportedManagerSkeletonPrivate;

struct _TumblerExportedManagerSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  TumblerExportedManagerSkeletonPrivate *priv;
};

struct _TumblerExportedManagerSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType tumbler_exported_manager_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (TumblerExportedManagerSkeleton, g_object_unref)
#endif

TumblerExportedManager *tumbler_exported_manager_skeleton_new (void);


G_END_DECLS

#endif /* __TUMBLER_MANAGER_GDBUS_H__ */
