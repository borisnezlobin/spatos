/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __TUMBLER_SERVICE_GDBUS_H__
#define __TUMBLER_SERVICE_GDBUS_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.thumbnails.Thumbnailer1 */

#define TUMBLER_TYPE_EXPORTED_SERVICE (tumbler_exported_service_get_type ())
#define TUMBLER_EXPORTED_SERVICE(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TUMBLER_TYPE_EXPORTED_SERVICE, TumblerExportedService))
#define TUMBLER_IS_EXPORTED_SERVICE(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TUMBLER_TYPE_EXPORTED_SERVICE))
#define TUMBLER_EXPORTED_SERVICE_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TUMBLER_TYPE_EXPORTED_SERVICE, TumblerExportedServiceIface))

struct _TumblerExportedService;
typedef struct _TumblerExportedService TumblerExportedService;
typedef struct _TumblerExportedServiceIface TumblerExportedServiceIface;

struct _TumblerExportedServiceIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_dequeue) (
    TumblerExportedService *object,
    GDBusMethodInvocation *invocation,
    guint arg_handle);

  gboolean (*handle_get_flavors) (
    TumblerExportedService *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_schedulers) (
    TumblerExportedService *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_supported) (
    TumblerExportedService *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_queue) (
    TumblerExportedService *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_uris,
    const gchar *const *arg_mime_types,
    const gchar *arg_flavor,
    const gchar *arg_scheduler,
    guint arg_handle_to_unqueue);

  void (*error) (
    TumblerExportedService *object,
    guint arg_handle,
    const gchar *const *arg_failed_uris,
    gint arg_error_code,
    const gchar *arg_message);

  void (*finished) (
    TumblerExportedService *object,
    guint arg_handle);

  void (*ready) (
    TumblerExportedService *object,
    guint arg_handle,
    const gchar *const *arg_uris);

  void (*started) (
    TumblerExportedService *object,
    guint arg_handle);

};

GType tumbler_exported_service_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *tumbler_exported_service_interface_info (void);
guint tumbler_exported_service_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void tumbler_exported_service_complete_queue (
    TumblerExportedService *object,
    GDBusMethodInvocation *invocation,
    guint handle);

void tumbler_exported_service_complete_dequeue (
    TumblerExportedService *object,
    GDBusMethodInvocation *invocation);

void tumbler_exported_service_complete_get_supported (
    TumblerExportedService *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *uri_schemes,
    const gchar *const *mime_types);

void tumbler_exported_service_complete_get_schedulers (
    TumblerExportedService *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *schedulers);

void tumbler_exported_service_complete_get_flavors (
    TumblerExportedService *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *flavors);



/* D-Bus signal emissions functions: */
void tumbler_exported_service_emit_started (
    TumblerExportedService *object,
    guint arg_handle);

void tumbler_exported_service_emit_finished (
    TumblerExportedService *object,
    guint arg_handle);

void tumbler_exported_service_emit_ready (
    TumblerExportedService *object,
    guint arg_handle,
    const gchar *const *arg_uris);

void tumbler_exported_service_emit_error (
    TumblerExportedService *object,
    guint arg_handle,
    const gchar *const *arg_failed_uris,
    gint arg_error_code,
    const gchar *arg_message);



/* D-Bus method calls: */
void tumbler_exported_service_call_queue (
    TumblerExportedService *proxy,
    const gchar *const *arg_uris,
    const gchar *const *arg_mime_types,
    const gchar *arg_flavor,
    const gchar *arg_scheduler,
    guint arg_handle_to_unqueue,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean tumbler_exported_service_call_queue_finish (
    TumblerExportedService *proxy,
    guint *out_handle,
    GAsyncResult *res,
    GError **error);

gboolean tumbler_exported_service_call_queue_sync (
    TumblerExportedService *proxy,
    const gchar *const *arg_uris,
    const gchar *const *arg_mime_types,
    const gchar *arg_flavor,
    const gchar *arg_scheduler,
    guint arg_handle_to_unqueue,
    guint *out_handle,
    GCancellable *cancellable,
    GError **error);

void tumbler_exported_service_call_dequeue (
    TumblerExportedService *proxy,
    guint arg_handle,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean tumbler_exported_service_call_dequeue_finish (
    TumblerExportedService *proxy,
    GAsyncResult *res,
    GError **error);

gboolean tumbler_exported_service_call_dequeue_sync (
    TumblerExportedService *proxy,
    guint arg_handle,
    GCancellable *cancellable,
    GError **error);

void tumbler_exported_service_call_get_supported (
    TumblerExportedService *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean tumbler_exported_service_call_get_supported_finish (
    TumblerExportedService *proxy,
    gchar ***out_uri_schemes,
    gchar ***out_mime_types,
    GAsyncResult *res,
    GError **error);

gboolean tumbler_exported_service_call_get_supported_sync (
    TumblerExportedService *proxy,
    gchar ***out_uri_schemes,
    gchar ***out_mime_types,
    GCancellable *cancellable,
    GError **error);

void tumbler_exported_service_call_get_schedulers (
    TumblerExportedService *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean tumbler_exported_service_call_get_schedulers_finish (
    TumblerExportedService *proxy,
    gchar ***out_schedulers,
    GAsyncResult *res,
    GError **error);

gboolean tumbler_exported_service_call_get_schedulers_sync (
    TumblerExportedService *proxy,
    gchar ***out_schedulers,
    GCancellable *cancellable,
    GError **error);

void tumbler_exported_service_call_get_flavors (
    TumblerExportedService *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean tumbler_exported_service_call_get_flavors_finish (
    TumblerExportedService *proxy,
    gchar ***out_flavors,
    GAsyncResult *res,
    GError **error);

gboolean tumbler_exported_service_call_get_flavors_sync (
    TumblerExportedService *proxy,
    gchar ***out_flavors,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TUMBLER_TYPE_EXPORTED_SERVICE_PROXY (tumbler_exported_service_proxy_get_type ())
#define TUMBLER_EXPORTED_SERVICE_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TUMBLER_TYPE_EXPORTED_SERVICE_PROXY, TumblerExportedServiceProxy))
#define TUMBLER_EXPORTED_SERVICE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TUMBLER_TYPE_EXPORTED_SERVICE_PROXY, TumblerExportedServiceProxyClass))
#define TUMBLER_EXPORTED_SERVICE_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TUMBLER_TYPE_EXPORTED_SERVICE_PROXY, TumblerExportedServiceProxyClass))
#define TUMBLER_IS_EXPORTED_SERVICE_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TUMBLER_TYPE_EXPORTED_SERVICE_PROXY))
#define TUMBLER_IS_EXPORTED_SERVICE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TUMBLER_TYPE_EXPORTED_SERVICE_PROXY))

typedef struct _TumblerExportedServiceProxy TumblerExportedServiceProxy;
typedef struct _TumblerExportedServiceProxyClass TumblerExportedServiceProxyClass;
typedef struct _TumblerExportedServiceProxyPrivate TumblerExportedServiceProxyPrivate;

struct _TumblerExportedServiceProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  TumblerExportedServiceProxyPrivate *priv;
};

struct _TumblerExportedServiceProxyClass
{
  GDBusProxyClass parent_class;
};

GType tumbler_exported_service_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (TumblerExportedServiceProxy, g_object_unref)
#endif

void tumbler_exported_service_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
TumblerExportedService *tumbler_exported_service_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
TumblerExportedService *tumbler_exported_service_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void tumbler_exported_service_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
TumblerExportedService *tumbler_exported_service_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
TumblerExportedService *tumbler_exported_service_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TUMBLER_TYPE_EXPORTED_SERVICE_SKELETON (tumbler_exported_service_skeleton_get_type ())
#define TUMBLER_EXPORTED_SERVICE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TUMBLER_TYPE_EXPORTED_SERVICE_SKELETON, TumblerExportedServiceSkeleton))
#define TUMBLER_EXPORTED_SERVICE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TUMBLER_TYPE_EXPORTED_SERVICE_SKELETON, TumblerExportedServiceSkeletonClass))
#define TUMBLER_EXPORTED_SERVICE_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TUMBLER_TYPE_EXPORTED_SERVICE_SKELETON, TumblerExportedServiceSkeletonClass))
#define TUMBLER_IS_EXPORTED_SERVICE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TUMBLER_TYPE_EXPORTED_SERVICE_SKELETON))
#define TUMBLER_IS_EXPORTED_SERVICE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TUMBLER_TYPE_EXPORTED_SERVICE_SKELETON))

typedef struct _TumblerExportedServiceSkeleton TumblerExportedServiceSkeleton;
typedef struct _TumblerExportedServiceSkeletonClass TumblerExportedServiceSkeletonClass;
typedef struct _TumblerExportedServiceSkeletonPrivate TumblerExportedServiceSkeletonPrivate;

struct _TumblerExportedServiceSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  TumblerExportedServiceSkeletonPrivate *priv;
};

struct _TumblerExportedServiceSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType tumbler_exported_service_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (TumblerExportedServiceSkeleton, g_object_unref)
#endif

TumblerExportedService *tumbler_exported_service_skeleton_new (void);


G_END_DECLS

#endif /* __TUMBLER_SERVICE_GDBUS_H__ */
