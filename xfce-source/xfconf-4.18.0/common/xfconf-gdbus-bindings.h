/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __XFCONF_GDBUS_BINDINGS_H__
#define __XFCONF_GDBUS_BINDINGS_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.xfce.Xfconf */

#define XFCONF_TYPE_EXPORTED (xfconf_exported_get_type ())
#define XFCONF_EXPORTED(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), XFCONF_TYPE_EXPORTED, XfconfExported))
#define XFCONF_IS_EXPORTED(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), XFCONF_TYPE_EXPORTED))
#define XFCONF_EXPORTED_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), XFCONF_TYPE_EXPORTED, XfconfExportedIface))

struct _XfconfExported;
typedef struct _XfconfExported XfconfExported;
typedef struct _XfconfExportedIface XfconfExportedIface;

struct _XfconfExportedIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_get_all_properties) (
    XfconfExported *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_channel,
    const gchar *arg_property_base);

  gboolean (*handle_get_property) (
    XfconfExported *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_channel,
    const gchar *arg_property);

  gboolean (*handle_is_property_locked) (
    XfconfExported *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_channel,
    const gchar *arg_property);

  gboolean (*handle_list_channels) (
    XfconfExported *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_property_exists) (
    XfconfExported *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_channel,
    const gchar *arg_property);

  gboolean (*handle_reset_property) (
    XfconfExported *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_channel,
    const gchar *arg_property,
    gboolean arg_recursive);

  gboolean (*handle_set_property) (
    XfconfExported *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_channel,
    const gchar *arg_property,
    GVariant *arg_value);

  void (*property_changed) (
    XfconfExported *object,
    const gchar *arg_channel,
    const gchar *arg_property,
    GVariant *arg_value);

  void (*property_removed) (
    XfconfExported *object,
    const gchar *arg_channel,
    const gchar *arg_property);

};

GType xfconf_exported_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *xfconf_exported_interface_info (void);
guint xfconf_exported_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void xfconf_exported_complete_set_property (
    XfconfExported *object,
    GDBusMethodInvocation *invocation);

void xfconf_exported_complete_get_property (
    XfconfExported *object,
    GDBusMethodInvocation *invocation,
    GVariant *value);

void xfconf_exported_complete_get_all_properties (
    XfconfExported *object,
    GDBusMethodInvocation *invocation,
    GVariant *properties);

void xfconf_exported_complete_property_exists (
    XfconfExported *object,
    GDBusMethodInvocation *invocation,
    gboolean exists);

void xfconf_exported_complete_reset_property (
    XfconfExported *object,
    GDBusMethodInvocation *invocation);

void xfconf_exported_complete_list_channels (
    XfconfExported *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *channels);

void xfconf_exported_complete_is_property_locked (
    XfconfExported *object,
    GDBusMethodInvocation *invocation,
    gboolean locked);



/* D-Bus signal emissions functions: */
void xfconf_exported_emit_property_changed (
    XfconfExported *object,
    const gchar *arg_channel,
    const gchar *arg_property,
    GVariant *arg_value);

void xfconf_exported_emit_property_removed (
    XfconfExported *object,
    const gchar *arg_channel,
    const gchar *arg_property);



/* D-Bus method calls: */
void xfconf_exported_call_set_property (
    XfconfExported *proxy,
    const gchar *arg_channel,
    const gchar *arg_property,
    GVariant *arg_value,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xfconf_exported_call_set_property_finish (
    XfconfExported *proxy,
    GAsyncResult *res,
    GError **error);

gboolean xfconf_exported_call_set_property_sync (
    XfconfExported *proxy,
    const gchar *arg_channel,
    const gchar *arg_property,
    GVariant *arg_value,
    GCancellable *cancellable,
    GError **error);

void xfconf_exported_call_get_property (
    XfconfExported *proxy,
    const gchar *arg_channel,
    const gchar *arg_property,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xfconf_exported_call_get_property_finish (
    XfconfExported *proxy,
    GVariant **out_value,
    GAsyncResult *res,
    GError **error);

gboolean xfconf_exported_call_get_property_sync (
    XfconfExported *proxy,
    const gchar *arg_channel,
    const gchar *arg_property,
    GVariant **out_value,
    GCancellable *cancellable,
    GError **error);

void xfconf_exported_call_get_all_properties (
    XfconfExported *proxy,
    const gchar *arg_channel,
    const gchar *arg_property_base,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xfconf_exported_call_get_all_properties_finish (
    XfconfExported *proxy,
    GVariant **out_properties,
    GAsyncResult *res,
    GError **error);

gboolean xfconf_exported_call_get_all_properties_sync (
    XfconfExported *proxy,
    const gchar *arg_channel,
    const gchar *arg_property_base,
    GVariant **out_properties,
    GCancellable *cancellable,
    GError **error);

void xfconf_exported_call_property_exists (
    XfconfExported *proxy,
    const gchar *arg_channel,
    const gchar *arg_property,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xfconf_exported_call_property_exists_finish (
    XfconfExported *proxy,
    gboolean *out_exists,
    GAsyncResult *res,
    GError **error);

gboolean xfconf_exported_call_property_exists_sync (
    XfconfExported *proxy,
    const gchar *arg_channel,
    const gchar *arg_property,
    gboolean *out_exists,
    GCancellable *cancellable,
    GError **error);

void xfconf_exported_call_reset_property (
    XfconfExported *proxy,
    const gchar *arg_channel,
    const gchar *arg_property,
    gboolean arg_recursive,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xfconf_exported_call_reset_property_finish (
    XfconfExported *proxy,
    GAsyncResult *res,
    GError **error);

gboolean xfconf_exported_call_reset_property_sync (
    XfconfExported *proxy,
    const gchar *arg_channel,
    const gchar *arg_property,
    gboolean arg_recursive,
    GCancellable *cancellable,
    GError **error);

void xfconf_exported_call_list_channels (
    XfconfExported *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xfconf_exported_call_list_channels_finish (
    XfconfExported *proxy,
    gchar ***out_channels,
    GAsyncResult *res,
    GError **error);

gboolean xfconf_exported_call_list_channels_sync (
    XfconfExported *proxy,
    gchar ***out_channels,
    GCancellable *cancellable,
    GError **error);

void xfconf_exported_call_is_property_locked (
    XfconfExported *proxy,
    const gchar *arg_channel,
    const gchar *arg_property,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xfconf_exported_call_is_property_locked_finish (
    XfconfExported *proxy,
    gboolean *out_locked,
    GAsyncResult *res,
    GError **error);

gboolean xfconf_exported_call_is_property_locked_sync (
    XfconfExported *proxy,
    const gchar *arg_channel,
    const gchar *arg_property,
    gboolean *out_locked,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define XFCONF_TYPE_EXPORTED_PROXY (xfconf_exported_proxy_get_type ())
#define XFCONF_EXPORTED_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), XFCONF_TYPE_EXPORTED_PROXY, XfconfExportedProxy))
#define XFCONF_EXPORTED_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), XFCONF_TYPE_EXPORTED_PROXY, XfconfExportedProxyClass))
#define XFCONF_EXPORTED_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), XFCONF_TYPE_EXPORTED_PROXY, XfconfExportedProxyClass))
#define XFCONF_IS_EXPORTED_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), XFCONF_TYPE_EXPORTED_PROXY))
#define XFCONF_IS_EXPORTED_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), XFCONF_TYPE_EXPORTED_PROXY))

typedef struct _XfconfExportedProxy XfconfExportedProxy;
typedef struct _XfconfExportedProxyClass XfconfExportedProxyClass;
typedef struct _XfconfExportedProxyPrivate XfconfExportedProxyPrivate;

struct _XfconfExportedProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  XfconfExportedProxyPrivate *priv;
};

struct _XfconfExportedProxyClass
{
  GDBusProxyClass parent_class;
};

GType xfconf_exported_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (XfconfExportedProxy, g_object_unref)
#endif

void xfconf_exported_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
XfconfExported *xfconf_exported_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
XfconfExported *xfconf_exported_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void xfconf_exported_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
XfconfExported *xfconf_exported_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
XfconfExported *xfconf_exported_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define XFCONF_TYPE_EXPORTED_SKELETON (xfconf_exported_skeleton_get_type ())
#define XFCONF_EXPORTED_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), XFCONF_TYPE_EXPORTED_SKELETON, XfconfExportedSkeleton))
#define XFCONF_EXPORTED_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), XFCONF_TYPE_EXPORTED_SKELETON, XfconfExportedSkeletonClass))
#define XFCONF_EXPORTED_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), XFCONF_TYPE_EXPORTED_SKELETON, XfconfExportedSkeletonClass))
#define XFCONF_IS_EXPORTED_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), XFCONF_TYPE_EXPORTED_SKELETON))
#define XFCONF_IS_EXPORTED_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), XFCONF_TYPE_EXPORTED_SKELETON))

typedef struct _XfconfExportedSkeleton XfconfExportedSkeleton;
typedef struct _XfconfExportedSkeletonClass XfconfExportedSkeletonClass;
typedef struct _XfconfExportedSkeletonPrivate XfconfExportedSkeletonPrivate;

struct _XfconfExportedSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  XfconfExportedSkeletonPrivate *priv;
};

struct _XfconfExportedSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType xfconf_exported_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (XfconfExportedSkeleton, g_object_unref)
#endif

XfconfExported *xfconf_exported_skeleton_new (void);


G_END_DECLS

#endif /* __XFCONF_GDBUS_BINDINGS_H__ */
