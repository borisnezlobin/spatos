/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __TUMBLER_H__
#define __TUMBLER_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.thumbnails.Thumbnailer1 */

#define TUMBLER_TYPE_THUMBNAILER1 (tumbler_thumbnailer1_get_type ())
#define TUMBLER_THUMBNAILER1(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TUMBLER_TYPE_THUMBNAILER1, TumblerThumbnailer1))
#define TUMBLER_IS_THUMBNAILER1(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TUMBLER_TYPE_THUMBNAILER1))
#define TUMBLER_THUMBNAILER1_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TUMBLER_TYPE_THUMBNAILER1, TumblerThumbnailer1Iface))

struct _TumblerThumbnailer1;
typedef struct _TumblerThumbnailer1 TumblerThumbnailer1;
typedef struct _TumblerThumbnailer1Iface TumblerThumbnailer1Iface;

struct _TumblerThumbnailer1Iface
{
  GTypeInterface parent_iface;


  gboolean (*handle_dequeue) (
    TumblerThumbnailer1 *object,
    GDBusMethodInvocation *invocation,
    guint arg_handle);

  gboolean (*handle_get_flavors) (
    TumblerThumbnailer1 *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_schedulers) (
    TumblerThumbnailer1 *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_supported) (
    TumblerThumbnailer1 *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_queue) (
    TumblerThumbnailer1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_uris,
    const gchar *const *arg_mime_types,
    const gchar *arg_flavor,
    const gchar *arg_scheduler,
    guint arg_handle_to_unqueue);

  void (*error) (
    TumblerThumbnailer1 *object,
    guint arg_handle,
    const gchar *const *arg_failed_uris,
    gint arg_error_code,
    const gchar *arg_message);

  void (*finished) (
    TumblerThumbnailer1 *object,
    guint arg_handle);

  void (*ready) (
    TumblerThumbnailer1 *object,
    guint arg_handle,
    const gchar *const *arg_uris);

  void (*started) (
    TumblerThumbnailer1 *object,
    guint arg_handle);

};

GType tumbler_thumbnailer1_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *tumbler_thumbnailer1_interface_info (void);
guint tumbler_thumbnailer1_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void tumbler_thumbnailer1_complete_queue (
    TumblerThumbnailer1 *object,
    GDBusMethodInvocation *invocation,
    guint handle);

void tumbler_thumbnailer1_complete_dequeue (
    TumblerThumbnailer1 *object,
    GDBusMethodInvocation *invocation);

void tumbler_thumbnailer1_complete_get_supported (
    TumblerThumbnailer1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *uri_schemes,
    const gchar *const *mime_types);

void tumbler_thumbnailer1_complete_get_schedulers (
    TumblerThumbnailer1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *schedulers);

void tumbler_thumbnailer1_complete_get_flavors (
    TumblerThumbnailer1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *flavors);



/* D-Bus signal emissions functions: */
void tumbler_thumbnailer1_emit_started (
    TumblerThumbnailer1 *object,
    guint arg_handle);

void tumbler_thumbnailer1_emit_finished (
    TumblerThumbnailer1 *object,
    guint arg_handle);

void tumbler_thumbnailer1_emit_ready (
    TumblerThumbnailer1 *object,
    guint arg_handle,
    const gchar *const *arg_uris);

void tumbler_thumbnailer1_emit_error (
    TumblerThumbnailer1 *object,
    guint arg_handle,
    const gchar *const *arg_failed_uris,
    gint arg_error_code,
    const gchar *arg_message);



/* D-Bus method calls: */
void tumbler_thumbnailer1_call_queue (
    TumblerThumbnailer1 *proxy,
    const gchar *const *arg_uris,
    const gchar *const *arg_mime_types,
    const gchar *arg_flavor,
    const gchar *arg_scheduler,
    guint arg_handle_to_unqueue,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean tumbler_thumbnailer1_call_queue_finish (
    TumblerThumbnailer1 *proxy,
    guint *out_handle,
    GAsyncResult *res,
    GError **error);

gboolean tumbler_thumbnailer1_call_queue_sync (
    TumblerThumbnailer1 *proxy,
    const gchar *const *arg_uris,
    const gchar *const *arg_mime_types,
    const gchar *arg_flavor,
    const gchar *arg_scheduler,
    guint arg_handle_to_unqueue,
    guint *out_handle,
    GCancellable *cancellable,
    GError **error);

void tumbler_thumbnailer1_call_dequeue (
    TumblerThumbnailer1 *proxy,
    guint arg_handle,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean tumbler_thumbnailer1_call_dequeue_finish (
    TumblerThumbnailer1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean tumbler_thumbnailer1_call_dequeue_sync (
    TumblerThumbnailer1 *proxy,
    guint arg_handle,
    GCancellable *cancellable,
    GError **error);

void tumbler_thumbnailer1_call_get_supported (
    TumblerThumbnailer1 *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean tumbler_thumbnailer1_call_get_supported_finish (
    TumblerThumbnailer1 *proxy,
    gchar ***out_uri_schemes,
    gchar ***out_mime_types,
    GAsyncResult *res,
    GError **error);

gboolean tumbler_thumbnailer1_call_get_supported_sync (
    TumblerThumbnailer1 *proxy,
    gchar ***out_uri_schemes,
    gchar ***out_mime_types,
    GCancellable *cancellable,
    GError **error);

void tumbler_thumbnailer1_call_get_schedulers (
    TumblerThumbnailer1 *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean tumbler_thumbnailer1_call_get_schedulers_finish (
    TumblerThumbnailer1 *proxy,
    gchar ***out_schedulers,
    GAsyncResult *res,
    GError **error);

gboolean tumbler_thumbnailer1_call_get_schedulers_sync (
    TumblerThumbnailer1 *proxy,
    gchar ***out_schedulers,
    GCancellable *cancellable,
    GError **error);

void tumbler_thumbnailer1_call_get_flavors (
    TumblerThumbnailer1 *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean tumbler_thumbnailer1_call_get_flavors_finish (
    TumblerThumbnailer1 *proxy,
    gchar ***out_flavors,
    GAsyncResult *res,
    GError **error);

gboolean tumbler_thumbnailer1_call_get_flavors_sync (
    TumblerThumbnailer1 *proxy,
    gchar ***out_flavors,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TUMBLER_TYPE_THUMBNAILER1_PROXY (tumbler_thumbnailer1_proxy_get_type ())
#define TUMBLER_THUMBNAILER1_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TUMBLER_TYPE_THUMBNAILER1_PROXY, TumblerThumbnailer1Proxy))
#define TUMBLER_THUMBNAILER1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TUMBLER_TYPE_THUMBNAILER1_PROXY, TumblerThumbnailer1ProxyClass))
#define TUMBLER_THUMBNAILER1_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TUMBLER_TYPE_THUMBNAILER1_PROXY, TumblerThumbnailer1ProxyClass))
#define TUMBLER_IS_THUMBNAILER1_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TUMBLER_TYPE_THUMBNAILER1_PROXY))
#define TUMBLER_IS_THUMBNAILER1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TUMBLER_TYPE_THUMBNAILER1_PROXY))

typedef struct _TumblerThumbnailer1Proxy TumblerThumbnailer1Proxy;
typedef struct _TumblerThumbnailer1ProxyClass TumblerThumbnailer1ProxyClass;
typedef struct _TumblerThumbnailer1ProxyPrivate TumblerThumbnailer1ProxyPrivate;

struct _TumblerThumbnailer1Proxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  TumblerThumbnailer1ProxyPrivate *priv;
};

struct _TumblerThumbnailer1ProxyClass
{
  GDBusProxyClass parent_class;
};

GType tumbler_thumbnailer1_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (TumblerThumbnailer1Proxy, g_object_unref)
#endif

void tumbler_thumbnailer1_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
TumblerThumbnailer1 *tumbler_thumbnailer1_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
TumblerThumbnailer1 *tumbler_thumbnailer1_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void tumbler_thumbnailer1_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
TumblerThumbnailer1 *tumbler_thumbnailer1_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
TumblerThumbnailer1 *tumbler_thumbnailer1_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TUMBLER_TYPE_THUMBNAILER1_SKELETON (tumbler_thumbnailer1_skeleton_get_type ())
#define TUMBLER_THUMBNAILER1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TUMBLER_TYPE_THUMBNAILER1_SKELETON, TumblerThumbnailer1Skeleton))
#define TUMBLER_THUMBNAILER1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TUMBLER_TYPE_THUMBNAILER1_SKELETON, TumblerThumbnailer1SkeletonClass))
#define TUMBLER_THUMBNAILER1_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TUMBLER_TYPE_THUMBNAILER1_SKELETON, TumblerThumbnailer1SkeletonClass))
#define TUMBLER_IS_THUMBNAILER1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TUMBLER_TYPE_THUMBNAILER1_SKELETON))
#define TUMBLER_IS_THUMBNAILER1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TUMBLER_TYPE_THUMBNAILER1_SKELETON))

typedef struct _TumblerThumbnailer1Skeleton TumblerThumbnailer1Skeleton;
typedef struct _TumblerThumbnailer1SkeletonClass TumblerThumbnailer1SkeletonClass;
typedef struct _TumblerThumbnailer1SkeletonPrivate TumblerThumbnailer1SkeletonPrivate;

struct _TumblerThumbnailer1Skeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  TumblerThumbnailer1SkeletonPrivate *priv;
};

struct _TumblerThumbnailer1SkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType tumbler_thumbnailer1_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (TumblerThumbnailer1Skeleton, g_object_unref)
#endif

TumblerThumbnailer1 *tumbler_thumbnailer1_skeleton_new (void);


G_END_DECLS

#endif /* __TUMBLER_H__ */
