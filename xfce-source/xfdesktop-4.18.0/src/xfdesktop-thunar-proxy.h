/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __XFDESKTOP_THUNAR_PROXY_H__
#define __XFDESKTOP_THUNAR_PROXY_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.xfce.Thunar */

#define XFDESKTOP_TYPE_THUNAR (xfdesktop_thunar_get_type ())
#define XFDESKTOP_THUNAR(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), XFDESKTOP_TYPE_THUNAR, XfdesktopThunar))
#define XFDESKTOP_IS_THUNAR(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), XFDESKTOP_TYPE_THUNAR))
#define XFDESKTOP_THUNAR_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), XFDESKTOP_TYPE_THUNAR, XfdesktopThunarIface))

struct _XfdesktopThunar;
typedef struct _XfdesktopThunar XfdesktopThunar;
typedef struct _XfdesktopThunarIface XfdesktopThunarIface;

struct _XfdesktopThunarIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_bulk_rename) (
    XfdesktopThunar *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_working_directory,
    const gchar *const *arg_filenames,
    gboolean arg_standalone,
    const gchar *arg_display,
    const gchar *arg_startup_id);

  gboolean (*handle_terminate) (
    XfdesktopThunar *object,
    GDBusMethodInvocation *invocation);

};

GType xfdesktop_thunar_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *xfdesktop_thunar_interface_info (void);
guint xfdesktop_thunar_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void xfdesktop_thunar_complete_bulk_rename (
    XfdesktopThunar *object,
    GDBusMethodInvocation *invocation);

void xfdesktop_thunar_complete_terminate (
    XfdesktopThunar *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void xfdesktop_thunar_call_bulk_rename (
    XfdesktopThunar *proxy,
    const gchar *arg_working_directory,
    const gchar *const *arg_filenames,
    gboolean arg_standalone,
    const gchar *arg_display,
    const gchar *arg_startup_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xfdesktop_thunar_call_bulk_rename_finish (
    XfdesktopThunar *proxy,
    GAsyncResult *res,
    GError **error);

gboolean xfdesktop_thunar_call_bulk_rename_sync (
    XfdesktopThunar *proxy,
    const gchar *arg_working_directory,
    const gchar *const *arg_filenames,
    gboolean arg_standalone,
    const gchar *arg_display,
    const gchar *arg_startup_id,
    GCancellable *cancellable,
    GError **error);

void xfdesktop_thunar_call_terminate (
    XfdesktopThunar *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xfdesktop_thunar_call_terminate_finish (
    XfdesktopThunar *proxy,
    GAsyncResult *res,
    GError **error);

gboolean xfdesktop_thunar_call_terminate_sync (
    XfdesktopThunar *proxy,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define XFDESKTOP_TYPE_THUNAR_PROXY (xfdesktop_thunar_proxy_get_type ())
#define XFDESKTOP_THUNAR_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), XFDESKTOP_TYPE_THUNAR_PROXY, XfdesktopThunarProxy))
#define XFDESKTOP_THUNAR_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), XFDESKTOP_TYPE_THUNAR_PROXY, XfdesktopThunarProxyClass))
#define XFDESKTOP_THUNAR_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), XFDESKTOP_TYPE_THUNAR_PROXY, XfdesktopThunarProxyClass))
#define XFDESKTOP_IS_THUNAR_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), XFDESKTOP_TYPE_THUNAR_PROXY))
#define XFDESKTOP_IS_THUNAR_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), XFDESKTOP_TYPE_THUNAR_PROXY))

typedef struct _XfdesktopThunarProxy XfdesktopThunarProxy;
typedef struct _XfdesktopThunarProxyClass XfdesktopThunarProxyClass;
typedef struct _XfdesktopThunarProxyPrivate XfdesktopThunarProxyPrivate;

struct _XfdesktopThunarProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  XfdesktopThunarProxyPrivate *priv;
};

struct _XfdesktopThunarProxyClass
{
  GDBusProxyClass parent_class;
};

GType xfdesktop_thunar_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (XfdesktopThunarProxy, g_object_unref)
#endif

void xfdesktop_thunar_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
XfdesktopThunar *xfdesktop_thunar_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
XfdesktopThunar *xfdesktop_thunar_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void xfdesktop_thunar_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
XfdesktopThunar *xfdesktop_thunar_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
XfdesktopThunar *xfdesktop_thunar_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define XFDESKTOP_TYPE_THUNAR_SKELETON (xfdesktop_thunar_skeleton_get_type ())
#define XFDESKTOP_THUNAR_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), XFDESKTOP_TYPE_THUNAR_SKELETON, XfdesktopThunarSkeleton))
#define XFDESKTOP_THUNAR_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), XFDESKTOP_TYPE_THUNAR_SKELETON, XfdesktopThunarSkeletonClass))
#define XFDESKTOP_THUNAR_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), XFDESKTOP_TYPE_THUNAR_SKELETON, XfdesktopThunarSkeletonClass))
#define XFDESKTOP_IS_THUNAR_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), XFDESKTOP_TYPE_THUNAR_SKELETON))
#define XFDESKTOP_IS_THUNAR_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), XFDESKTOP_TYPE_THUNAR_SKELETON))

typedef struct _XfdesktopThunarSkeleton XfdesktopThunarSkeleton;
typedef struct _XfdesktopThunarSkeletonClass XfdesktopThunarSkeletonClass;
typedef struct _XfdesktopThunarSkeletonPrivate XfdesktopThunarSkeletonPrivate;

struct _XfdesktopThunarSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  XfdesktopThunarSkeletonPrivate *priv;
};

struct _XfdesktopThunarSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType xfdesktop_thunar_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (XfdesktopThunarSkeleton, g_object_unref)
#endif

XfdesktopThunar *xfdesktop_thunar_skeleton_new (void);


G_END_DECLS

#endif /* __XFDESKTOP_THUNAR_PROXY_H__ */
