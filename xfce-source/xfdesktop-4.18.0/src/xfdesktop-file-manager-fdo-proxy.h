/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __XFDESKTOP_FILE_MANAGER_FDO_PROXY_H__
#define __XFDESKTOP_FILE_MANAGER_FDO_PROXY_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.FileManager1 */

#define XFDESKTOP_TYPE_FILE_MANAGER1 (xfdesktop_file_manager1_get_type ())
#define XFDESKTOP_FILE_MANAGER1(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), XFDESKTOP_TYPE_FILE_MANAGER1, XfdesktopFileManager1))
#define XFDESKTOP_IS_FILE_MANAGER1(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), XFDESKTOP_TYPE_FILE_MANAGER1))
#define XFDESKTOP_FILE_MANAGER1_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), XFDESKTOP_TYPE_FILE_MANAGER1, XfdesktopFileManager1Iface))

struct _XfdesktopFileManager1;
typedef struct _XfdesktopFileManager1 XfdesktopFileManager1;
typedef struct _XfdesktopFileManager1Iface XfdesktopFileManager1Iface;

struct _XfdesktopFileManager1Iface
{
  GTypeInterface parent_iface;

  gboolean (*handle_show_folders) (
    XfdesktopFileManager1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_URIs,
    const gchar *arg_StartupId);

  gboolean (*handle_show_item_properties) (
    XfdesktopFileManager1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_URIs,
    const gchar *arg_StartupId);

  gboolean (*handle_show_items) (
    XfdesktopFileManager1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_URIs,
    const gchar *arg_StartupId);

};

GType xfdesktop_file_manager1_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *xfdesktop_file_manager1_interface_info (void);
guint xfdesktop_file_manager1_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void xfdesktop_file_manager1_complete_show_folders (
    XfdesktopFileManager1 *object,
    GDBusMethodInvocation *invocation);

void xfdesktop_file_manager1_complete_show_items (
    XfdesktopFileManager1 *object,
    GDBusMethodInvocation *invocation);

void xfdesktop_file_manager1_complete_show_item_properties (
    XfdesktopFileManager1 *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void xfdesktop_file_manager1_call_show_folders (
    XfdesktopFileManager1 *proxy,
    const gchar *const *arg_URIs,
    const gchar *arg_StartupId,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xfdesktop_file_manager1_call_show_folders_finish (
    XfdesktopFileManager1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean xfdesktop_file_manager1_call_show_folders_sync (
    XfdesktopFileManager1 *proxy,
    const gchar *const *arg_URIs,
    const gchar *arg_StartupId,
    GCancellable *cancellable,
    GError **error);

void xfdesktop_file_manager1_call_show_items (
    XfdesktopFileManager1 *proxy,
    const gchar *const *arg_URIs,
    const gchar *arg_StartupId,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xfdesktop_file_manager1_call_show_items_finish (
    XfdesktopFileManager1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean xfdesktop_file_manager1_call_show_items_sync (
    XfdesktopFileManager1 *proxy,
    const gchar *const *arg_URIs,
    const gchar *arg_StartupId,
    GCancellable *cancellable,
    GError **error);

void xfdesktop_file_manager1_call_show_item_properties (
    XfdesktopFileManager1 *proxy,
    const gchar *const *arg_URIs,
    const gchar *arg_StartupId,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xfdesktop_file_manager1_call_show_item_properties_finish (
    XfdesktopFileManager1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean xfdesktop_file_manager1_call_show_item_properties_sync (
    XfdesktopFileManager1 *proxy,
    const gchar *const *arg_URIs,
    const gchar *arg_StartupId,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define XFDESKTOP_TYPE_FILE_MANAGER1_PROXY (xfdesktop_file_manager1_proxy_get_type ())
#define XFDESKTOP_FILE_MANAGER1_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), XFDESKTOP_TYPE_FILE_MANAGER1_PROXY, XfdesktopFileManager1Proxy))
#define XFDESKTOP_FILE_MANAGER1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), XFDESKTOP_TYPE_FILE_MANAGER1_PROXY, XfdesktopFileManager1ProxyClass))
#define XFDESKTOP_FILE_MANAGER1_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), XFDESKTOP_TYPE_FILE_MANAGER1_PROXY, XfdesktopFileManager1ProxyClass))
#define XFDESKTOP_IS_FILE_MANAGER1_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), XFDESKTOP_TYPE_FILE_MANAGER1_PROXY))
#define XFDESKTOP_IS_FILE_MANAGER1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), XFDESKTOP_TYPE_FILE_MANAGER1_PROXY))

typedef struct _XfdesktopFileManager1Proxy XfdesktopFileManager1Proxy;
typedef struct _XfdesktopFileManager1ProxyClass XfdesktopFileManager1ProxyClass;
typedef struct _XfdesktopFileManager1ProxyPrivate XfdesktopFileManager1ProxyPrivate;

struct _XfdesktopFileManager1Proxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  XfdesktopFileManager1ProxyPrivate *priv;
};

struct _XfdesktopFileManager1ProxyClass
{
  GDBusProxyClass parent_class;
};

GType xfdesktop_file_manager1_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (XfdesktopFileManager1Proxy, g_object_unref)
#endif

void xfdesktop_file_manager1_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
XfdesktopFileManager1 *xfdesktop_file_manager1_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
XfdesktopFileManager1 *xfdesktop_file_manager1_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void xfdesktop_file_manager1_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
XfdesktopFileManager1 *xfdesktop_file_manager1_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
XfdesktopFileManager1 *xfdesktop_file_manager1_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define XFDESKTOP_TYPE_FILE_MANAGER1_SKELETON (xfdesktop_file_manager1_skeleton_get_type ())
#define XFDESKTOP_FILE_MANAGER1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), XFDESKTOP_TYPE_FILE_MANAGER1_SKELETON, XfdesktopFileManager1Skeleton))
#define XFDESKTOP_FILE_MANAGER1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), XFDESKTOP_TYPE_FILE_MANAGER1_SKELETON, XfdesktopFileManager1SkeletonClass))
#define XFDESKTOP_FILE_MANAGER1_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), XFDESKTOP_TYPE_FILE_MANAGER1_SKELETON, XfdesktopFileManager1SkeletonClass))
#define XFDESKTOP_IS_FILE_MANAGER1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), XFDESKTOP_TYPE_FILE_MANAGER1_SKELETON))
#define XFDESKTOP_IS_FILE_MANAGER1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), XFDESKTOP_TYPE_FILE_MANAGER1_SKELETON))

typedef struct _XfdesktopFileManager1Skeleton XfdesktopFileManager1Skeleton;
typedef struct _XfdesktopFileManager1SkeletonClass XfdesktopFileManager1SkeletonClass;
typedef struct _XfdesktopFileManager1SkeletonPrivate XfdesktopFileManager1SkeletonPrivate;

struct _XfdesktopFileManager1Skeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  XfdesktopFileManager1SkeletonPrivate *priv;
};

struct _XfdesktopFileManager1SkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType xfdesktop_file_manager1_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (XfdesktopFileManager1Skeleton, g_object_unref)
#endif

XfdesktopFileManager1 *xfdesktop_file_manager1_skeleton_new (void);


G_END_DECLS

#endif /* __XFDESKTOP_FILE_MANAGER_FDO_PROXY_H__ */
