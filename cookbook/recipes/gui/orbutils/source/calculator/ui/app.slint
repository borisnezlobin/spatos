import { CoopWindow, RoundButton, MediumTitle, Button, Theme } from "_imports/coop_widgets.slint";

export { Theme }

export component App inherits CoopWindow {
    private property <bool> display_result;
    private property <string> text <=> i_text.text;

    callback calculate(string) -> string;
    callback backspace(string) -> string;
    callback validate(string) -> string;

    title: "Calculator";
    width: 200px;
    height: 222px;
    accent_color: #5294E2;
    on_accent_color: white;
    forward-focus: i_focus_scope;

    VerticalLayout {
        padding_top: Theme.spaces.medium;
        padding_left: Theme.spaces.small;
        padding_right: Theme.spaces.small;
        padding_bottom: Theme.spaces.small;
        spacing: Theme.spaces.medium;

        Rectangle {  
            vertical-stretch: 0;
            clip: true;
            i_text := MediumTitle {
                width: 100%;
                height: 100%;
                vertical_alignment: center;
                horizontal-alignment: right;
            }
        }
       
        GridLayout { 
           
            spacing: Theme.spaces.extra-small;

            Row {
                Button {
                    text: "(";
                    clicked => { root.input(self.text); }
                }

                Button {
                    text: ")";
                    clicked => { root.input(self.text); }
                }

                Button {
                    text: "^";
                    clicked => { root.input(self.text); }
                }

                Button {
                    primary: true;
                    text: "/";
                    clicked => { root.input(self.text); }
                }
            }

            Row {
                Button {
                    text: "7";
                    clicked => { root.input(self.text); }
                }

                Button {
                    text: "8";
                    clicked => { root.input(self.text); }
                }

                Button {
                    text: "9";
                    clicked => { root.input(self.text); }
                }

                Button {
                    primary: true;
                    text: "*";
                    clicked => { root.input(self.text); }
                }
            }

            Row {
                Button {
                    text: "4";
                    clicked => { root.input(self.text); }
                }

                Button {
                    text: "5";
                    clicked => { root.input(self.text); }
                }

                Button {
                    text: "6";
                    clicked => { root.input(self.text); }
                }

                Button {
                    primary: true;
                    text: "-";
                    clicked => { root.input(self.text); }
                }
            }

            Row {
                Button {
                    text: "1";
                    clicked => { root.input(self.text); }
                }

                Button {
                    text: "2";
                    clicked => { root.input(self.text); }
                }

                Button {
                    text: "3";
                    clicked => { root.input(self.text); }
                }

                Button {
                    primary: true;
                    text: "+";
                    clicked => { root.input(self.text); }
                }
            }

            Row {
                Button {
                    text: "0";
                    clicked => { root.input(self.text); }
                }

                Button {
                    text: ".";
                    clicked => { root.input(self.text); }
                }

                Button {
                    text: "C";
                    clicked => { root.clear(); }
                }

                i_result_button := Button {
                    primary: true;
                    text: "=";
                    clicked => { 
                        root.text = root.calculate(root.text); 
                        display_result = true;
                    }
                }
            }
        }
    }

    i_focus_scope := FocusScope {  
        width: 0px;

        key_pressed(e) => { 
            if(e.text == Key.Backspace) {
                root.text = root.backspace(root.text);
                return accept;
            }

            if(e.text == Key.Return || e.text == "=") {
                i_result_button.clicked();
                return accept;
            }

            if(e.text == "C") {
                root.clear();
                return accept;
            }

            root.input(e.text);
            accept
         }
    }

    function input(text: string) { 
        if(display_result) {
            root.text = "";
            root.display_result = false;
        }
        root.text += validate(text);
    }

    function clear() {
        root.display_result = false;
        root.text = "";
    }
}